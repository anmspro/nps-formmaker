{"remainingRequest":"E:\\code\\vue-form-making\\node_modules\\babel-loader\\lib\\index.js!E:\\code\\vue-form-making\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\code\\vue-form-making\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\code\\vue-form-making\\src\\components\\WidgetForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\code\\vue-form-making\\src\\components\\WidgetForm.vue","mtime":1653889326453},{"path":"E:\\code\\vue-form-making\\package.json","mtime":1653903306889},{"path":"E:\\code\\vue-form-making\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1653903169935},{"path":"E:\\code\\vue-form-making\\node_modules\\babel-loader\\lib\\index.js","mtime":1653803163997},{"path":"E:\\code\\vue-form-making\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1653903169935},{"path":"E:\\code\\vue-form-making\\node_modules\\vue-loader\\lib\\index.js","mtime":1653903175370}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"E:/code/vue-form-making/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Draggable from 'vuedraggable';\nimport WidgetFormItem from \"./WidgetFormItem\";\nexport default {\n  components: {\n    Draggable: Draggable,\n    WidgetFormItem: WidgetFormItem\n  },\n  props: ['data', 'select'],\n  data: function data() {\n    return {\n      selectWidget: this.select\n    };\n  },\n  mounted: function mounted() {\n    document.body.ondrop = function (event) {\n      var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\n\n      if (isFirefox) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    };\n  },\n  methods: {\n    handleMoveEnd: function handleMoveEnd(_ref) {\n      var newIndex = _ref.newIndex,\n          oldIndex = _ref.oldIndex;\n      console.log('index', newIndex, oldIndex);\n    },\n    handleSelectWidget: function handleSelectWidget(index) {\n      console.log(index, '#####');\n      this.selectWidget = this.data.list[index];\n    },\n    handleWidgetAdd: function handleWidgetAdd(evt) {\n      console.log('add', evt);\n      console.log('end', evt);\n      var newIndex = evt.newIndex;\n      var to = evt.to;\n      console.log(to); //为拖拽到容器的元素添加唯一 key\n\n      var key = Date.parse(new Date()) + '_' + Math.ceil(Math.random() * 99999);\n      this.$set(this.data.list, newIndex, _objectSpread(_objectSpread({}, this.data.list[newIndex]), {}, {\n        options: _objectSpread(_objectSpread({}, this.data.list[newIndex].options), {}, {\n          remoteFunc: 'func_' + key\n        }),\n        key: key,\n        // 绑定键值\n        model: this.data.list[newIndex].type + '_' + key,\n        rules: []\n      }));\n\n      if (this.data.list[newIndex].type === 'radio' || this.data.list[newIndex].type === 'checkbox' || this.data.list[newIndex].type === 'select') {\n        this.$set(this.data.list, newIndex, _objectSpread(_objectSpread({}, this.data.list[newIndex]), {}, {\n          options: _objectSpread(_objectSpread({}, this.data.list[newIndex].options), {}, {\n            options: this.data.list[newIndex].options.options.map(function (item) {\n              return _objectSpread({}, item);\n            })\n          })\n        }));\n      }\n\n      if (this.data.list[newIndex].type === 'grid') {\n        this.$set(this.data.list, newIndex, _objectSpread(_objectSpread({}, this.data.list[newIndex]), {}, {\n          columns: this.data.list[newIndex].columns.map(function (item) {\n            return _objectSpread({}, item);\n          })\n        }));\n      }\n\n      this.selectWidget = this.data.list[newIndex];\n    },\n    handleWidgetColAdd: function handleWidgetColAdd($event, row, colIndex) {\n      console.log('coladd', $event, row, colIndex);\n      var newIndex = $event.newIndex;\n      var oldIndex = $event.oldIndex;\n      var item = $event.item; // 防止布局元素的嵌套拖拽\n\n      if (item.className.indexOf('data-grid') >= 0) {\n        // 如果是列表中拖拽的元素需要还原到原来位置\n        item.tagName === 'DIV' && this.data.list.splice(oldIndex, 0, row.columns[colIndex].list[newIndex]);\n        row.columns[colIndex].list.splice(newIndex, 1);\n        return false;\n      }\n\n      console.log('from', item);\n      var key = Date.parse(new Date()) + '_' + Math.ceil(Math.random() * 99999);\n      this.$set(row.columns[colIndex].list, newIndex, _objectSpread(_objectSpread({}, row.columns[colIndex].list[newIndex]), {}, {\n        options: _objectSpread(_objectSpread({}, row.columns[colIndex].list[newIndex].options), {}, {\n          remoteFunc: 'func_' + key\n        }),\n        key: key,\n        // 绑定键值\n        model: row.columns[colIndex].list[newIndex].type + '_' + key,\n        rules: []\n      }));\n\n      if (row.columns[colIndex].list[newIndex].type === 'radio' || row.columns[colIndex].list[newIndex].type === 'checkbox' || row.columns[colIndex].list[newIndex].type === 'select') {\n        this.$set(row.columns[colIndex].list, newIndex, _objectSpread(_objectSpread({}, row.columns[colIndex].list[newIndex]), {}, {\n          options: _objectSpread(_objectSpread({}, row.columns[colIndex].list[newIndex].options), {}, {\n            options: row.columns[colIndex].list[newIndex].options.options.map(function (item) {\n              return _objectSpread({}, item);\n            })\n          })\n        }));\n      }\n\n      this.selectWidget = row.columns[colIndex].list[newIndex];\n    },\n    handleWidgetDelete: function handleWidgetDelete(index) {\n      var _this = this;\n\n      if (this.data.list.length - 1 === index) {\n        if (index === 0) {\n          this.selectWidget = {};\n        } else {\n          this.selectWidget = this.data.list[index - 1];\n        }\n      } else {\n        this.selectWidget = this.data.list[index + 1];\n      }\n\n      this.$nextTick(function () {\n        _this.data.list.splice(index, 1);\n      });\n    }\n  },\n  watch: {\n    select: function select(val) {\n      this.selectWidget = val;\n    },\n    selectWidget: {\n      handler: function handler(val) {\n        this.$emit('update:select', val);\n      },\n      deep: true\n    }\n  }\n};",{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoEA;AACA;AAEA;EACAA;IACAC,oBADA;IAEAC;EAFA,CADA;EAKAC,yBALA;EAMAC,IANA,kBAMA;IACA;MACAC;IADA;EAGA,CAVA;EAWAC,OAXA,qBAWA;IACAC;MACA;;MACA;QACAC;QACAA;MACA;IACA,CANA;EAOA,CAnBA;EAoBAC;IACAC,aADA,+BACA;MAAA;MAAA;MACAC;IACA,CAHA;IAIAC,kBAJA,8BAIAC,KAJA,EAIA;MACAF;MACA;IACA,CAPA;IAQAG,eARA,2BAQAC,GARA,EAQA;MACAJ;MACAA;MACA;MACA;MACAA,gBALA,CAOA;;MACA;MACA,oEACA,wBADA;QAEAK,yCACA,gCADA;UAEAC;QAFA,EAFA;QAMAC,QANA;QAOA;QACAC,gDARA;QASAC;MATA;;MAYA;QACA,oEACA,wBADA;UAEAJ,yCACA,gCADA;YAEAA;cAAA,yBACAK,IADA;YAAA;UAFA;QAFA;MASA;;MAEA;QACA,oEACA,wBADA;UAEAC;YAAA;UAAA;QAFA;MAIA;;MAEA;IACA,CAjDA;IAkDAC,kBAlDA,8BAkDAC,MAlDA,EAkDAC,GAlDA,EAkDAC,QAlDA,EAkDA;MACAf;MACA;MACA;MACA,uBAJA,CAMA;;MACA;QAEA;QACAU;QAEAI;QAEA;MACA;;MAEAd;MAEA;MAEA,gFACAc,oCADA;QAEAT,yCACAS,4CADA;UAEAR;QAFA,EAFA;QAMAC,QANA;QAOA;QACAC,4DARA;QASAC;MATA;;MAYA;QACA,gFACAK,oCADA;UAEAT,yCACAS,4CADA;YAEAT;cAAA,yBACAK,IADA;YAAA;UAFA;QAFA;MASA;;MAEA;IACA,CAhGA;IAiGAM,kBAjGA,8BAiGAd,KAjGA,EAiGA;MAAA;;MACA;QACA;UACA;QACA,CAFA,MAEA;UACA;QACA;MACA,CANA,MAMA;QACA;MACA;;MAEA;QACA;MACA,CAFA;IAGA;EA/GA,CApBA;EAqIAe;IACAC,MADA,kBACAC,GADA,EACA;MACA;IACA,CAHA;IAIAzB;MACA0B,OADA,mBACAD,GADA,EACA;QACA;MACA,CAHA;MAIAE;IAJA;EAJA;AArIA","names":["components","Draggable","WidgetFormItem","props","data","selectWidget","mounted","document","event","methods","handleMoveEnd","console","handleSelectWidget","index","handleWidgetAdd","evt","options","remoteFunc","key","model","rules","item","columns","handleWidgetColAdd","$event","row","colIndex","handleWidgetDelete","watch","select","val","handler","deep"],"sourceRoot":"src/components","sources":["WidgetForm.vue"],"sourcesContent":["<template>\r\n  <div class=\"widget-form-container\">\r\n    <div v-if=\"data.list.length == 0\" class=\"form-empty\">{{$t('fm.description.containerEmpty')}}</div>\r\n    <el-form :size=\"data.config.size\" label-suffix=\":\" :label-position=\"data.config.labelPosition\" :label-width=\"data.config.labelWidth + 'px'\">\r\n      \r\n      <draggable class=\"\" \r\n        v-model=\"data.list\" \r\n        v-bind=\"{group:'people', ghostClass: 'ghost',animation: 200, handle: '.drag-widget'}\"\r\n        @end=\"handleMoveEnd\"\r\n        @add=\"handleWidgetAdd\"\r\n      >\r\n\r\n        <transition-group name=\"fade\" tag=\"div\" class=\"widget-form-list\">\r\n          <template v-for=\"(element, index) in data.list\">\r\n            <template v-if=\"element.type == 'grid'\">\r\n                <el-row class=\"widget-col widget-view\" v-if=\"element && element.key\" :key=\"element.key\" \r\n                  type=\"flex\"\r\n                  :class=\"{active: selectWidget.key == element.key}\"\r\n                  :gutter=\"element.options.gutter ? element.options.gutter : 0\"\r\n                  :justify=\"element.options.justify\"\r\n                  :align=\"element.options.align\"\r\n                  @click.native=\"handleSelectWidget(index)\">\r\n                  <el-col  v-for=\"(col, colIndex) in element.columns\" :key=\"colIndex\" :span=\"col.span ? col.span : 0\">\r\n                    \r\n                      <draggable\r\n                        v-model=\"col.list\"\r\n                        :no-transition-on-drag=\"true\"\r\n                        v-bind=\"{group:'people', ghostClass: 'ghost',animation: 200, handle: '.drag-widget'}\"\r\n                        @end=\"handleMoveEnd\"\r\n                        @add=\"handleWidgetColAdd($event, element, colIndex)\"\r\n                      >\r\n                        <transition-group name=\"fade\" tag=\"div\" class=\"widget-col-list\">\r\n                          <template v-for=\"(el, i) in col.list\">\r\n                            <widget-form-item                             \r\n                              :key=\"el.key\"\r\n                              v-if=\"el.key\"\r\n                              :element=\"el\" \r\n                              :select.sync=\"selectWidget\" \r\n                              :index=\"i\" \r\n                              :data=\"col\">\r\n                            </widget-form-item>\r\n                          </template>\r\n                          \r\n                        </transition-group>\r\n                        \r\n                      </draggable>\r\n                  </el-col>\r\n                  <div class=\"widget-view-action widget-col-action\" v-if=\"selectWidget.key == element.key\">\r\n        \r\n                    <i class=\"iconfont icon-trash\" @click.stop=\"handleWidgetDelete(index)\"></i>\r\n                  </div>\r\n\r\n                  <div class=\"widget-view-drag widget-col-drag\" v-if=\"selectWidget.key == element.key\">\r\n                    <i class=\"iconfont icon-drag drag-widget\"></i>\r\n                  </div>\r\n                </el-row>\r\n            </template>\r\n            <template v-else>\r\n              <widget-form-item v-if=\"element && element.key\"  :key=\"element.key\" :element=\"element\" :select.sync=\"selectWidget\" :index=\"index\" :data=\"data\"></widget-form-item>\r\n            </template>\r\n          </template>\r\n        </transition-group>\r\n      </draggable>\r\n    </el-form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Draggable from 'vuedraggable'\r\nimport WidgetFormItem from './WidgetFormItem'\r\n\r\nexport default {\r\n  components: {\r\n    Draggable,\r\n    WidgetFormItem\r\n  },\r\n  props: ['data', 'select'],\r\n  data () {\r\n    return {\r\n      selectWidget: this.select\r\n    }\r\n  },\r\n  mounted () {\r\n    document.body.ondrop = function (event) {\r\n      let isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1\r\n      if (isFirefox) {\r\n        event.preventDefault()\r\n        event.stopPropagation()\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    handleMoveEnd ({newIndex, oldIndex}) {\r\n      console.log('index', newIndex, oldIndex)\r\n    },\r\n    handleSelectWidget (index) {\r\n      console.log(index, '#####')\r\n      this.selectWidget = this.data.list[index]\r\n    },\r\n    handleWidgetAdd (evt) {\r\n      console.log('add', evt)\r\n      console.log('end', evt)\r\n      const newIndex = evt.newIndex\r\n      const to = evt.to\r\n      console.log(to)\r\n      \r\n      //为拖拽到容器的元素添加唯一 key\r\n      const key = Date.parse(new Date()) + '_' + Math.ceil(Math.random() * 99999)\r\n      this.$set(this.data.list, newIndex, {\r\n        ...this.data.list[newIndex],\r\n        options: {\r\n          ...this.data.list[newIndex].options,\r\n          remoteFunc: 'func_' + key\r\n        },\r\n        key,\r\n        // 绑定键值\r\n        model: this.data.list[newIndex].type + '_' + key,\r\n        rules: []\r\n      })\r\n\r\n      if (this.data.list[newIndex].type === 'radio' || this.data.list[newIndex].type === 'checkbox' || this.data.list[newIndex].type === 'select') {\r\n        this.$set(this.data.list, newIndex, {\r\n          ...this.data.list[newIndex],\r\n          options: {\r\n            ...this.data.list[newIndex].options,\r\n            options: this.data.list[newIndex].options.options.map(item => ({\r\n              ...item\r\n            }))\r\n          }\r\n        })\r\n      }\r\n\r\n      if (this.data.list[newIndex].type === 'grid') {\r\n        this.$set(this.data.list, newIndex, {\r\n          ...this.data.list[newIndex],\r\n          columns: this.data.list[newIndex].columns.map(item => ({...item}))\r\n        })\r\n      }\r\n\r\n      this.selectWidget = this.data.list[newIndex]\r\n    },\r\n    handleWidgetColAdd ($event, row, colIndex) {\r\n      console.log('coladd', $event, row, colIndex)\r\n      const newIndex = $event.newIndex\r\n      const oldIndex = $event.oldIndex\r\n      const item = $event.item\r\n\r\n      // 防止布局元素的嵌套拖拽\r\n      if (item.className.indexOf('data-grid') >= 0) {\r\n\r\n        // 如果是列表中拖拽的元素需要还原到原来位置\r\n        item.tagName === 'DIV' && this.data.list.splice(oldIndex, 0, row.columns[colIndex].list[newIndex])\r\n\r\n        row.columns[colIndex].list.splice(newIndex, 1)\r\n\r\n        return false\r\n      }\r\n\r\n      console.log('from', item)\r\n\r\n      const key = Date.parse(new Date()) + '_' + Math.ceil(Math.random() * 99999)\r\n\r\n      this.$set(row.columns[colIndex].list, newIndex, {\r\n        ...row.columns[colIndex].list[newIndex],\r\n        options: {\r\n          ...row.columns[colIndex].list[newIndex].options,\r\n          remoteFunc: 'func_' + key\r\n        },\r\n        key,\r\n        // 绑定键值\r\n        model: row.columns[colIndex].list[newIndex].type + '_' + key,\r\n        rules: []\r\n      })\r\n\r\n      if (row.columns[colIndex].list[newIndex].type === 'radio' || row.columns[colIndex].list[newIndex].type === 'checkbox' || row.columns[colIndex].list[newIndex].type === 'select') {\r\n        this.$set(row.columns[colIndex].list, newIndex, {\r\n          ...row.columns[colIndex].list[newIndex],\r\n          options: {\r\n            ...row.columns[colIndex].list[newIndex].options,\r\n            options: row.columns[colIndex].list[newIndex].options.options.map(item => ({\r\n              ...item\r\n            }))\r\n          }\r\n        })\r\n      }\r\n\r\n      this.selectWidget = row.columns[colIndex].list[newIndex]\r\n    },\r\n    handleWidgetDelete (index) {\r\n      if (this.data.list.length - 1 === index) {\r\n        if (index === 0) {\r\n          this.selectWidget = {}\r\n        } else {\r\n          this.selectWidget = this.data.list[index - 1]\r\n        }\r\n      } else {\r\n        this.selectWidget = this.data.list[index + 1]\r\n      }\r\n\r\n      this.$nextTick(() => {\r\n        this.data.list.splice(index, 1)\r\n      })\r\n    },\r\n  },\r\n  watch: {\r\n    select (val) {\r\n      this.selectWidget = val\r\n    },\r\n    selectWidget: {\r\n      handler (val) {\r\n        this.$emit('update:select', val)\r\n      },\r\n      deep: true\r\n    }\r\n  }\r\n}\r\n</script>\r\n"]}]}