{"remainingRequest":"E:\\code\\vue-form-making\\node_modules\\babel-loader\\lib\\index.js!E:\\code\\vue-form-making\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\code\\vue-form-making\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\code\\vue-form-making\\src\\components\\WidgetFormItem.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\code\\vue-form-making\\src\\components\\WidgetFormItem.vue","mtime":1655185556463},{"path":"E:\\code\\vue-form-making\\package.json","mtime":1654596815509},{"path":"E:\\code\\vue-form-making\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1653903169935},{"path":"E:\\code\\vue-form-making\\node_modules\\babel-loader\\lib\\index.js","mtime":1653803163997},{"path":"E:\\code\\vue-form-making\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1653903169935},{"path":"E:\\code\\vue-form-making\\node_modules\\vue-loader\\lib\\index.js","mtime":1653903175370}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"E:/code/vue-form-making/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es6.regexp.to-string\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport FmUpload from \"./Upload\";\nexport default {\n  props: ['element', 'select', 'index', 'data'],\n  components: {\n    FmUpload: FmUpload\n  },\n  data: function data() {\n    return {\n      selectWidget: this.select\n    };\n  },\n  mounted: function mounted() {},\n  methods: {\n    handleSelectWidget: function handleSelectWidget(index) {\n      this.selectWidget = this.data.list[index];\n    },\n    handleWidgetDelete: function handleWidgetDelete(index) {\n      var _this = this;\n\n      if (this.data.list.length - 1 === index) {\n        if (index === 0) {\n          this.selectWidget = {};\n        } else {\n          this.selectWidget = this.data.list[index - 1];\n        }\n      } else {\n        this.selectWidget = this.data.list[index + 1];\n      }\n\n      this.$nextTick(function () {\n        _this.data.list.splice(index, 1);\n      });\n    },\n    handleWidgetClone: function handleWidgetClone(index) {\n      var _this2 = this;\n\n      var key = Date.parse(new Date().toString()) + '_' + Math.ceil(Math.random() * 99999);\n\n      var cloneData = _objectSpread(_objectSpread({}, this.data.list[index]), {}, {\n        options: _objectSpread(_objectSpread({}, this.data.list[index].options), {}, {\n          remoteFunc: 'func_' + key\n        }),\n        key: key,\n        model: this.data.list[index].type + '_' + key,\n        rules: this.data.list[index].rules || []\n      });\n\n      if (this.data.list[index].type === 'nps' || this.data.list[index].type === 'mcqSingle' || this.data.list[index].type === 'mcqMultiple' || this.data.list[index].type === 'radio' || this.data.list[index].type === 'yesno' || this.data.list[index].type === 'checkbox' || this.data.list[index].type === 'select') {\n        cloneData = _objectSpread(_objectSpread({}, cloneData), {}, {\n          options: _objectSpread(_objectSpread({}, cloneData.options), {}, {\n            options: cloneData.options.options.map(function (item) {\n              return _objectSpread({}, item);\n            })\n          })\n        });\n      }\n\n      if (this.data.list[index].type === 'matrix') {\n        cloneData = _objectSpread(_objectSpread({}, cloneData), {}, {\n          options: _objectSpread(_objectSpread({}, cloneData.options), {}, {\n            options1: cloneData.options.options1.map(function (item) {\n              return _objectSpread({}, item);\n            }),\n            options2: cloneData.options.options2.map(function (item) {\n              return _objectSpread({}, item);\n            })\n          })\n        });\n      }\n\n      if (this.data.list[index].type === 'matrixDynamic') {\n        cloneData = _objectSpread(_objectSpread({}, cloneData), {}, {\n          options: _objectSpread(_objectSpread({}, cloneData.options), {}, {\n            rowOptions: cloneData.options.rowOptions.map(function (item) {\n              return _objectSpread({}, item);\n            }),\n            columnOptions: cloneData.options.columnOptions.map(function (item) {\n              return _objectSpread({}, item);\n            })\n          })\n        });\n      }\n\n      this.data.list.splice(index, 0, cloneData);\n      this.$nextTick(function () {\n        _this2.selectWidget = _this2.data.list[index + 1];\n      });\n    },\n    handleChange: function handleChange(row, column, event) {\n      this.value = Object.assign({}, this.value, _defineProperty({}, row.id, column.value));\n    }\n  },\n  watch: {\n    select: function select(val) {\n      this.selectWidget = val;\n    },\n    selectWidget: {\n      handler: function handler(val) {\n        this.$emit('update:select', val);\n      },\n      deep: true\n    }\n  }\n};",{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqdA;AACA;EACAA,6CADA;EAEAC;IACAC;EADA,CAFA;EAKAC,IALA,kBAKA;IACA;MACAC;IADA;EAGA,CATA;EAUAC,OAVA,qBAUA,CAEA,CAZA;EAaAC;IACAC,kBADA,8BACAC,KADA,EACA;MACA;IACA,CAHA;IAIAC,kBAJA,8BAIAD,KAJA,EAIA;MAAA;;MACA;QACA;UACA;QACA,CAFA,MAEA;UACA;QACA;MACA,CANA,MAMA;QACA;MACA;;MAEA;QACA;MACA,CAFA;IAGA,CAlBA;IAmBAE,iBAnBA,6BAmBAF,KAnBA,EAmBA;MAAA;;MACA;;MACA,gDACA,qBADA;QAEAG,yCACA,6BADA;UAEAC;QAFA,EAFA;QAMAC,QANA;QAOAC,6CAPA;QAQAC;MARA;;MAWA,0FACA,4CADA,IAEA,sCAFA,IAEA,sCAFA,IAGA,yCAHA,IAGA,uCAHA,EAGA;QAEAC,4CACAA,SADA;UAEAL,yCACAK,iBADA;YAEAL;cAAA;YAAA;UAFA;QAFA;MAOA;;MAEA;QAEAK,4CACAA,SADA;UAEAL,yCACAK,iBADA;YAEAC;cAAA;YAAA,EAFA;YAGAC;cAAA;YAAA;UAHA;QAFA;MAQA;;MAEA;QAEAF,4CACAA,SADA;UAEAL,yCACAK,iBADA;YAEAG;cAAA;YAAA,EAFA;YAGAC;cAAA;YAAA;UAHA;QAFA;MAQA;;MAEA;MAEA;QACA;MACA,CAFA;IAGA,CA3EA;IA4EAC,YA5EA,wBA4EAC,GA5EA,EA4EAC,MA5EA,EA4EAC,KA5EA,EA4EA;MACA;IACA;EA9EA,CAbA;EA6FAC;IACAC,MADA,kBACAC,GADA,EACA;MACA;IACA,CAHA;IAIAvB;MACAwB,OADA,mBACAD,GADA,EACA;QACA;MACA,CAHA;MAIAE;IAJA;EAJA;AA7FA","names":["props","components","FmUpload","data","selectWidget","mounted","methods","handleSelectWidget","index","handleWidgetDelete","handleWidgetClone","options","remoteFunc","key","model","rules","cloneData","options1","options2","rowOptions","columnOptions","handleChange","row","column","event","watch","select","val","handler","deep"],"sourceRoot":"src/components","sources":["WidgetFormItem.vue"],"sourcesContent":["<template>\r\n  <el-form-item class=\"widget-view \"\r\n      v-if=\"element && element.key\" \r\n      :class=\"{active: selectWidget.key == element.key, 'is_req': element.options.required}\"\r\n      @click.native.stop=\"handleSelectWidget(index)\"\r\n    >\r\n    <!-- :label=\"element.name\" -->\r\n        <template v-if=\"element.type == 'input'\">\r\n          <el-input \r\n            v-model=\"element.options.defaultValue\"\r\n            :style=\"{width: element.options.width}\"\r\n            :placeholder=\"element.options.placeholder\"\r\n            :disabled=\"element.options.disabled\"\r\n          ></el-input>\r\n        </template>\r\n\r\n        <template v-if=\"element.type == 'textarea'\">\r\n          <el-input type=\"textarea\" :rows=\"5\"\r\n            v-model=\"element.options.defaultValue\"\r\n            :style=\"{width: element.options.width}\"\r\n            :disabled=\"element.options.disabled\"\r\n            :placeholder=\"element.options.placeholder\"\r\n          ></el-input>\r\n        </template>\r\n\r\n        <template v-if=\"element.type == 'number'\">\r\n          <el-input-number \r\n            v-model=\"element.options.defaultValue\" \r\n            :disabled=\"element.options.disabled\"\r\n            :controls-position=\"element.options.controlsPosition\"\r\n            :style=\"{width: element.options.width}\"\r\n          ></el-input-number>\r\n        </template>\r\n\r\n        <template v-if=\"element.type == 'radio'\">\r\n          <el-radio-group v-model=\"element.options.defaultValue\"\r\n            :style=\"{width: element.options.width}\"\r\n            :disabled=\"element.options.disabled\"\r\n          >\r\n            <el-radio  \r\n              :style=\"{display: element.options.inline ? 'inline-block' : 'block'}\"\r\n              :label=\"item.value\" v-for=\"(item, index) in element.options.options\" :key=\"item.value + index\"\r\n              \r\n            >\r\n              {{element.options.showLabel ? item.label : item.value}}\r\n            </el-radio>\r\n          </el-radio-group>\r\n        </template>\r\n        \r\n        <template v-if=\"element.type == 'nps'\">\r\n          <!-- <span>{{element.options.textValue}}</span> -->\r\n          <p v-html=\"element.options.textValue\"></p>\r\n          <br>\r\n          <!-- <p>{{element.options.descriptionValue}}</p> -->\r\n          <p v-html=\"element.options.descriptionValue\"></p>\r\n         <!-- <span>{{element.options.descriptionValue}}</span> -->\r\n          <br>\r\n          <el-radio-group v-model=\"element.options.defaultValue\"\r\n            :style=\"{width: element.options.width}\"\r\n            :disabled=\"element.options.disabled\"\r\n          >\r\n            <el-radio  \r\n              :style=\"{display: element.options.inline ? 'inline-block' : 'block'}\"\r\n              :label=\"item.value\" v-for=\"(item, index) in element.options.options\" :key=\"item.value + index\"\r\n              \r\n            >\r\n              {{element.options.showLabel ? item.label : item.value}}\r\n            </el-radio>\r\n          </el-radio-group>\r\n        </template>\r\n\r\n        <template v-if=\"element.type == 'mcqSingle'\">\r\n          <p v-html=\"element.options.textValue\"></p>\r\n          <br>\r\n          <el-radio-group v-model=\"element.options.defaultValue\"\r\n            :style=\"{width: element.options.width}\"\r\n            :disabled=\"element.options.disabled\"\r\n          >\r\n            <el-radio  \r\n              :style=\"{display: element.options.inline ? 'inline-block' : 'block'}\"\r\n              :label=\"item.value\" v-for=\"(item, index) in element.options.options\" :key=\"item.value + index\"\r\n              \r\n            >\r\n              {{element.options.showLabel ? item.label : item.value}}\r\n            </el-radio>\r\n          </el-radio-group>\r\n        </template>\r\n\r\n        <template v-if=\"element.type == 'rating'\">\r\n          <p v-html=\"element.options.textValue\"></p>\r\n          <br>\r\n          <p v-html=\"element.options.descriptionValue\"></p>\r\n          <br>\r\n          <el-rate v-model=\"element.options.defaultValue\"\r\n            :max=\"element.options.max\"\r\n            :disabled=\"element.options.disabled\"\r\n            :allow-half=\"element.options.allowHalf\"\r\n          ></el-rate>\r\n        </template>\r\n\r\n        <template v-if=\"element.type == 'matrix'\">\r\n          <p v-html=\"element.options.textValue\"></p>\r\n          <br>\r\n          <p v-html=\"element.options.descriptionValue\"></p>\r\n          <br>\r\n          <table>\r\n            <tr>\r\n              <td></td>\r\n              <td>1st Column</td>\r\n              <td>2nd Column</td>\r\n            </tr>\r\n            <tr>\r\n              <td>1st Row</td>\r\n              <td colspan=\"2\">\r\n                <el-radio-group v-model=\"element.options.defaultValue[0]\"\r\n                  :style=\"{width: element.options.width}\"\r\n                  :disabled=\"element.options.disabled\"\r\n                >\r\n                  <el-radio  \r\n                    :style=\"{display: element.options.inline ? 'inline-block' : 'block'}\"\r\n                    :label=\"item.value\" v-for=\"(item, index) in element.options.options1\" :key=\"item.value + index\"\r\n                    \r\n                  >\r\n                    {{element.options.showLabel ? item.label : item.value}}\r\n                  </el-radio>\r\n                </el-radio-group>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>2nd Row</td>\r\n              <td colspan=\"2\">\r\n                <el-radio-group v-model=\"element.options.defaultValue[1]\"\r\n                  :style=\"{width: element.options.width}\"\r\n                  :disabled=\"element.options.disabled\"\r\n                >\r\n                  <el-radio  \r\n                    :style=\"{display: element.options.inline ? 'inline-block' : 'block'}\"\r\n                    :label=\"item.value\" v-for=\"(item, index) in element.options.options2\" :key=\"item.value + index\"\r\n                    \r\n                  >\r\n                    {{element.options.showLabel ? item.label : item.value}}\r\n                  </el-radio>\r\n                </el-radio-group>\r\n              </td>\r\n            </tr>\r\n          </table>\r\n          <!--\r\n          <el-radio-group v-model=\"element.options.defaultValue[0]\"\r\n            :style=\"{width: element.options.width}\"\r\n            :disabled=\"element.options.disabled\"\r\n          >\r\n            <el-radio  \r\n              :style=\"{display: element.options.inline ? 'inline-block' : 'block'}\"\r\n              :label=\"item.value\" v-for=\"(item, index) in element.options.options1\" :key=\"item.value + index\"\r\n              \r\n            >\r\n              {{element.options.showLabel ? item.label : item.value}}\r\n            </el-radio>\r\n          </el-radio-group>\r\n          <br>\r\n          <el-radio-group v-model=\"element.options.defaultValue[1]\"\r\n            :style=\"{width: element.options.width}\"\r\n            :disabled=\"element.options.disabled\"\r\n          >\r\n            <el-radio  \r\n              :style=\"{display: element.options.inline ? 'inline-block' : 'block'}\"\r\n              :label=\"item.value\" v-for=\"(item, index) in element.options.options2\" :key=\"item.value + index\"\r\n              \r\n            >\r\n              {{element.options.showLabel ? item.label : item.value}}\r\n            </el-radio>\r\n          </el-radio-group>\r\n          -->\r\n        </template>\r\n\r\n        <template v-if=\"element.type == 'matrixDynamic'\">\r\n          <p v-html=\"element.options.textValue\"></p>\r\n          <br>\r\n          <p v-html=\"element.options.descriptionValue\"></p>\r\n          <br>\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th scope=\"col\"></th>\r\n                <th scope=\"col\" v-for=\"column in element.options.columnOptions\" :key=\"column.value\">\r\n                {{ column.name }}\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr v-for=\"(row, index) in element.options.rowOptions\" :key=\"row.name\" >\r\n                <th scope=\"row\">\r\n                  <div>\r\n                    <label>{{ row.name }}</label>\r\n                  </div>\r\n                </th>\r\n                <td :colspan=\"element.options.columnOptions.length\">\r\n                    \r\n                    <el-radio-group v-model=\"element.options.defaultValue[index]\"\r\n                      :style=\"{width: element.options.width}\"\r\n                      :disabled=\"element.options.disabled\"\r\n                    >\r\n                      <el-radio  \r\n                        :style=\"{display: element.options.inline ? 'inline-block' : 'block'}\"\r\n                        :label=\"item.value\" v-for=\"(item, index) in element.options.columnOptions\" :key=\"item.value + index\"\r\n                        \r\n                      >\r\n                        {{element.options.showLabel ? item.label : item.value}}\r\n                      </el-radio>\r\n                    </el-radio-group>\r\n                </td>\r\n                <!--\r\n                -->\r\n                <!--\r\n                <td>\r\n                  <input\r\n                    type=\"radio\"\r\n                    :name=\"row.value\"\r\n                    :value=\"column.value\"\r\n                    v-model=\"element.options.defaultValue[index]\"\r\n                    :style=\"{display: element.options.inline ? 'inline-block' : 'block'}\"\r\n                  />\r\n                </td>\r\n                <td v-for=\"column in element.options.columnOptions\" :key=\"column.value\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    :name=\"row.name\"\r\n                    \r\n                    :value=\"choice.value\"\r\n                    :checked=\"value && value[question.id] === choice.value\"\r\n                    :class=\"schema.fieldClasses\"\r\n                    v-attributes=\"'input'\"\r\n                  />\r\n                </td>\r\n\r\n                  v-model=\"element.options.defaultValue[index]\"\r\n                  v-for=\"column in element.options.columnOptions\" :key=\"column.value\"\r\n                  <input\r\n                    type=\"radio\"\r\n                    :name=\"row.value\"\r\n                    :value=\"column.value\"\r\n                    :style=\"{display: element.options.inline ? 'inline-block' : 'block'}\"\r\n                  />\r\n                    :this.element.options.defaultValue[index]=\"column.value\"\r\n                    v-attributes=\"'input'\"\r\n                    @click=\"handleChange(row, column, $event)\"\r\n                    :checked=\"value && value[row.id] === column.value\"\r\n                    :label=\"column.value\"\r\n\r\n                    \r\n                    @click=\"handleChange(question, choice, $event)\"\r\n                    :value=\"choice.value\"\r\n                    :checked=\"value && value[question.id] === choice.value\"\r\n                    :class=\"schema.fieldClasses\"\r\n                    v-attributes=\"'input'\"\r\n                -->\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </template>\r\n\r\n        <template v-if=\"element.type == 'mcqMultiple'\">\r\n          <p v-html=\"element.options.textValue\"></p>\r\n          <br>\r\n          <el-checkbox-group v-model=\"element.options.defaultValue\"\r\n            :style=\"{width: element.options.width}\"\r\n            :disabled=\"element.options.disabled\"\r\n          >\r\n            <el-checkbox\r\n              :style=\"{display: element.options.inline ? 'inline-block' : 'block'}\"\r\n              :label=\"item.value\" v-for=\"(item, index) in element.options.options\" :key=\"item.value + index\"\r\n            >\r\n              {{element.options.showLabel ? item.label : item.value}}\r\n            </el-checkbox>\r\n          </el-checkbox-group>\r\n        </template>\r\n\r\n        <template v-if=\"element.type == 'yesno'\">\r\n          <p v-html=\"element.options.textValue\"></p>\r\n          <br>\r\n          <el-radio-group v-model=\"element.options.defaultValue\"\r\n            :style=\"{width: element.options.width}\"\r\n            :disabled=\"element.options.disabled\"\r\n          >\r\n            <el-radio  \r\n              :style=\"{display: element.options.inline ? 'inline-block' : 'block'}\"\r\n              :label=\"item.value\" v-for=\"(item, index) in element.options.options\" :key=\"item.value + index\"\r\n            >\r\n              {{element.options.showLabel ? item.label : item.value}}\r\n            </el-radio>\r\n          </el-radio-group>\r\n        </template>\r\n\r\n        <template v-if=\"element.type == 'openEnded'\">\r\n          <p v-html=\"element.options.textValue\"></p>\r\n          <br>\r\n          <el-input type=\"textarea\" :rows=\"2\"\r\n            v-model=\"element.options.defaultValue\"\r\n            :style=\"{width: element.options.width}\"\r\n            :disabled=\"element.options.disabled\"\r\n            :placeholder=\"element.options.placeholder\"\r\n          ></el-input>\r\n        </template>\r\n\r\n        <template v-if=\"element.type == 'checkbox'\">\r\n          <el-checkbox-group v-model=\"element.options.defaultValue\"\r\n            :style=\"{width: element.options.width}\"\r\n            :disabled=\"element.options.disabled\"\r\n          >\r\n            <el-checkbox\r\n              :style=\"{display: element.options.inline ? 'inline-block' : 'block'}\"\r\n              :label=\"item.value\" v-for=\"(item, index) in element.options.options\" :key=\"item.value + index\"\r\n            >\r\n              {{element.options.showLabel ? item.label : item.value}}\r\n            </el-checkbox>\r\n          </el-checkbox-group>\r\n        </template>\r\n\r\n        <template v-if=\"element.type == 'time'\">\r\n          <el-time-picker \r\n            v-model=\"element.options.defaultValue\"\r\n            :is-range=\"element.options.isRange\"\r\n            :placeholder=\"element.options.placeholder\"\r\n            :start-placeholder=\"element.options.startPlaceholder\"\r\n            :end-placeholder=\"element.options.endPlaceholder\"\r\n            :readonly=\"element.options.readonly\"\r\n            :disabled=\"element.options.disabled\"\r\n            :editable=\"element.options.editable\"\r\n            :clearable=\"element.options.clearable\"\r\n            :arrowControl=\"element.options.arrowControl\"\r\n            :style=\"{width: element.options.width}\"\r\n          >\r\n          </el-time-picker>\r\n        </template>\r\n\r\n        <template v-if=\"element.type == 'date'\">\r\n          <el-date-picker\r\n            v-model=\"element.options.defaultValue\"\r\n            :type=\"element.options.type\"\r\n            :is-range=\"element.options.isRange\"\r\n            :placeholder=\"element.options.placeholder\"\r\n            :start-placeholder=\"element.options.startPlaceholder\"\r\n            :end-placeholder=\"element.options.endPlaceholder\"\r\n            :readonly=\"element.options.readonly\"\r\n            :disabled=\"element.options.disabled\"\r\n            :editable=\"element.options.editable\"\r\n            :clearable=\"element.options.clearable\"\r\n            :style=\"{width: element.options.width}\"  \r\n          >\r\n          </el-date-picker>\r\n        </template>\r\n\r\n        <template v-if=\"element.type == 'rate'\">\r\n          <el-rate v-model=\"element.options.defaultValue\"\r\n            :max=\"element.options.max\"\r\n            :disabled=\"element.options.disabled\"\r\n            :allow-half=\"element.options.allowHalf\"\r\n          ></el-rate>\r\n        </template>\r\n\r\n        <template v-if=\"element.type == 'color'\">\r\n          <el-color-picker \r\n            v-model=\"element.options.defaultValue\"\r\n            :disabled=\"element.options.disabled\"\r\n            :show-alpha=\"element.options.showAlpha\"\r\n          ></el-color-picker>\r\n        </template>\r\n\r\n        <template v-if=\"element.type == 'select'\">\r\n          <el-select\r\n            v-model=\"element.options.defaultValue\"\r\n            :disabled=\"element.options.disabled\"\r\n            :multiple=\"element.options.multiple\"\r\n            :clearable=\"element.options.clearable\"\r\n            :placeholder=\"element.options.placeholder\"\r\n            :style=\"{width: element.options.width}\"\r\n          >\r\n            <el-option v-for=\"item in element.options.options\" :key=\"item.value\" :value=\"item.value\" :label=\"element.options.showLabel?item.label:item.value\"></el-option>\r\n          </el-select>\r\n        </template>\r\n\r\n        <template v-if=\"element.type=='switch'\">\r\n          <el-switch\r\n            v-model=\"element.options.defaultValue\"\r\n            :disabled=\"element.options.disabled\"\r\n          >\r\n          </el-switch>\r\n        </template>\r\n\r\n        <template v-if=\"element.type=='slider'\">\r\n          <!--\r\n          -->\r\n          <p v-html=\"element.options.textValue\"></p>\r\n          <br>\r\n          <el-slider \r\n            v-model=\"element.options.defaultValue\"\r\n            :min=\"element.options.min\"\r\n            :max=\"element.options.max\"\r\n            :disabled=\"element.options.disabled\"\r\n            :step=\"element.options.step\"\r\n            :show-input=\"element.options.showInput\"\r\n            :range=\"element.options.range\"\r\n            :style=\"{width: element.options.width}\"\r\n          ></el-slider>\r\n        </template>\r\n\r\n        <template v-if=\"element.type=='imgupload'\">\r\n          <fm-upload\r\n            v-model=\"element.options.defaultValue\"\r\n            :disabled=\"element.options.disabled\"\r\n            :style=\"{'width': element.options.width}\"\r\n            :width=\"element.options.size.width\"\r\n            :height=\"element.options.size.height\"\r\n            token=\"xxx\"\r\n            domain=\"xxx\"\r\n          >\r\n            \r\n          </fm-upload>\r\n        </template>\r\n\r\n        <template v-if=\"element.type == 'cascader'\">\r\n          <el-cascader\r\n            v-model=\"element.options.defaultValue\"\r\n            :disabled=\"element.options.disabled\"\r\n            :clearable=\"element.options.clearable\"\r\n            :placeholder=\"element.options.placeholder\"\r\n            :style=\"{width: element.options.width}\"\r\n            :options=\"element.options.remoteOptions\"\r\n          >\r\n\r\n          </el-cascader>\r\n        </template>\r\n\r\n        <template v-if=\"element.type == 'editor'\">\r\n          <!--\r\n          <tiny-mce\r\n            v-model=\"element.options.defaultValue\"\r\n            :style=\"{width: element.options.width}\"\r\n          >\r\n          </tiny-mce>\r\n          -->\r\n          <vue-editor\r\n            v-model=\"element.options.defaultValue\"\r\n            :style=\"{width: element.options.width}\"\r\n          >\r\n          </vue-editor>\r\n        </template>\r\n\r\n        <template v-if=\"element.type=='blank'\">\r\n          <div style=\"height: 50px;color: #999;background: #eee;line-height:50px;text-align:center;\">{{$t('fm.components.fields.blank')}}</div>\r\n        </template>\r\n\r\n        <template v-if=\"element.type == 'text'\">\r\n          <span>{{element.options.defaultValue}}</span>\r\n        </template>\r\n\r\n        <div class=\"widget-view-action\" v-if=\"selectWidget.key == element.key\">\r\n          <i class=\"iconfont icon-icon_clone\" @click.stop=\"handleWidgetClone(index)\"></i>\r\n          <i class=\"iconfont icon-trash\" @click.stop=\"handleWidgetDelete(index)\"></i>\r\n        </div>\r\n\r\n        <div class=\"widget-view-drag\" v-if=\"selectWidget.key == element.key\">\r\n          <i class=\"iconfont icon-drag drag-widget\"></i>\r\n        </div>\r\n        \r\n    </el-form-item>\r\n</template>\r\n\r\n<script>\r\nimport FmUpload from './Upload'\r\nexport default {\r\n  props: ['element', 'select', 'index', 'data'],\r\n  components: {\r\n    FmUpload,\r\n  },\r\n  data () {\r\n    return {\r\n      selectWidget: this.select\r\n    }\r\n  },\r\n  mounted () {\r\n    \r\n  },\r\n  methods: {\r\n    handleSelectWidget (index) {\r\n      this.selectWidget = this.data.list[index]\r\n    },\r\n    handleWidgetDelete (index) {\r\n      if (this.data.list.length - 1 === index) {\r\n        if (index === 0) {\r\n          this.selectWidget = {}\r\n        } else {\r\n          this.selectWidget = this.data.list[index - 1]\r\n        }\r\n      } else {\r\n        this.selectWidget = this.data.list[index + 1]\r\n      }\r\n\r\n      this.$nextTick(() => {\r\n        this.data.list.splice(index, 1)\r\n      })\r\n    },\r\n    handleWidgetClone (index) {\r\n      const key = Date.parse(new Date().toString()) + '_' + Math.ceil(Math.random() * 99999)\r\n      let cloneData = {\r\n        ...this.data.list[index],\r\n        options: {\r\n          ...this.data.list[index].options,\r\n          remoteFunc: 'func_' + key\r\n        },\r\n        key,\r\n        model: this.data.list[index].type + '_' + key,\r\n        rules: this.data.list[index].rules || []\r\n      }\r\n\r\n      if (this.data.list[index].type === 'nps' || this.data.list[index].type === 'mcqSingle' ||\r\n          this.data.list[index].type === 'mcqMultiple' ||\r\n          this.data.list[index].type === 'radio' || this.data.list[index].type === 'yesno' ||\r\n          this.data.list[index].type === 'checkbox' || this.data.list[index].type === 'select') {\r\n\r\n        cloneData = {\r\n          ...cloneData,\r\n          options: {\r\n            ...cloneData.options,\r\n            options: cloneData.options.options.map(item => ({...item}))\r\n          }\r\n        }\r\n      }\r\n\r\n      if (this.data.list[index].type === 'matrix') {\r\n\r\n        cloneData = {\r\n          ...cloneData,\r\n          options: {\r\n            ...cloneData.options,\r\n            options1: cloneData.options.options1.map(item => ({...item})),\r\n            options2: cloneData.options.options2.map(item => ({...item}))\r\n          }\r\n        }\r\n      }\r\n\r\n      if (this.data.list[index].type === 'matrixDynamic') {\r\n\r\n        cloneData = {\r\n          ...cloneData,\r\n          options: {\r\n            ...cloneData.options,\r\n            rowOptions: cloneData.options.rowOptions.map(item => ({...item})),\r\n            columnOptions: cloneData.options.columnOptions.map(item => ({...item}))\r\n          }\r\n        }\r\n      }\r\n\r\n      this.data.list.splice(index, 0, cloneData)\r\n\r\n      this.$nextTick(() => {\r\n        this.selectWidget = this.data.list[index + 1]\r\n      })\r\n    },\r\n    handleChange (row, column, event) {\r\n      this.value = Object.assign({}, this.value, { [row.id]: column.value })\r\n    }\r\n  },\r\n  watch: {\r\n    select (val) {\r\n      this.selectWidget = val\r\n    },\r\n    selectWidget: {\r\n      handler (val) {\r\n        this.$emit('update:select', val)\r\n      },\r\n      deep: true\r\n    }\r\n  }\r\n}\r\n</script>\r\n"]}]}