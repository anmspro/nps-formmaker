{"remainingRequest":"E:\\code\\vue-form-making\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\code\\vue-form-making\\src\\components\\WidgetFormItem.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\code\\vue-form-making\\src\\components\\WidgetFormItem.vue","mtime":1653889326453},{"path":"E:\\code\\vue-form-making\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1653903169935},{"path":"E:\\code\\vue-form-making\\node_modules\\babel-loader\\lib\\index.js","mtime":1653803163997},{"path":"E:\\code\\vue-form-making\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1653903169935},{"path":"E:\\code\\vue-form-making\\node_modules\\vue-loader\\lib\\index.js","mtime":1653903175370}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport FmUpload from './Upload'\r\nexport default {\r\n  props: ['element', 'select', 'index', 'data'],\r\n  components: {\r\n    FmUpload,\r\n  },\r\n  data () {\r\n    return {\r\n      selectWidget: this.select\r\n    }\r\n  },\r\n  mounted () {\r\n    \r\n  },\r\n  methods: {\r\n    handleSelectWidget (index) {\r\n      this.selectWidget = this.data.list[index]\r\n    },\r\n    handleWidgetDelete (index) {\r\n      if (this.data.list.length - 1 === index) {\r\n        if (index === 0) {\r\n          this.selectWidget = {}\r\n        } else {\r\n          this.selectWidget = this.data.list[index - 1]\r\n        }\r\n      } else {\r\n        this.selectWidget = this.data.list[index + 1]\r\n      }\r\n\r\n      this.$nextTick(() => {\r\n        this.data.list.splice(index, 1)\r\n      })\r\n    },\r\n    handleWidgetClone (index) {\r\n      const key = Date.parse(new Date().toString()) + '_' + Math.ceil(Math.random() * 99999)\r\n      let cloneData = {\r\n        ...this.data.list[index],\r\n        options: {\r\n          ...this.data.list[index].options,\r\n          remoteFunc: 'func_' + key\r\n        },\r\n        key,\r\n        model: this.data.list[index].type + '_' + key,\r\n        rules: this.data.list[index].rules || []\r\n      }\r\n\r\n      if (this.data.list[index].type === 'radio' || this.data.list[index].type === 'checkbox' || this.data.list[index].type === 'select') {\r\n\r\n        cloneData = {\r\n          ...cloneData,\r\n          options: {\r\n            ...cloneData.options,\r\n            options: cloneData.options.options.map(item => ({...item}))\r\n          }\r\n        }\r\n      }\r\n\r\n      this.data.list.splice(index, 0, cloneData)\r\n\r\n      this.$nextTick(() => {\r\n        this.selectWidget = this.data.list[index + 1]\r\n      })\r\n    },\r\n  },\r\n  watch: {\r\n    select (val) {\r\n      this.selectWidget = val\r\n    },\r\n    selectWidget: {\r\n      handler (val) {\r\n        this.$emit('update:select', val)\r\n      },\r\n      deep: true\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["WidgetFormItem.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2MA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"WidgetFormItem.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <el-form-item class=\"widget-view \"\r\n      v-if=\"element && element.key\" \r\n      :class=\"{active: selectWidget.key == element.key, 'is_req': element.options.required}\"\r\n      :label=\"element.name\"\r\n      @click.native.stop=\"handleSelectWidget(index)\"\r\n    >\r\n        <template v-if=\"element.type == 'input'\">\r\n          <el-input \r\n            v-model=\"element.options.defaultValue\"\r\n            :style=\"{width: element.options.width}\"\r\n            :placeholder=\"element.options.placeholder\"\r\n            :disabled=\"element.options.disabled\"\r\n          ></el-input>\r\n        </template>\r\n\r\n        <template v-if=\"element.type == 'textarea'\">\r\n          <el-input type=\"textarea\" :rows=\"5\"\r\n            v-model=\"element.options.defaultValue\"\r\n            :style=\"{width: element.options.width}\"\r\n            :disabled=\"element.options.disabled\"\r\n            :placeholder=\"element.options.placeholder\"\r\n          ></el-input>\r\n        </template>\r\n\r\n        <template v-if=\"element.type == 'number'\">\r\n          <el-input-number \r\n            v-model=\"element.options.defaultValue\" \r\n            :disabled=\"element.options.disabled\"\r\n            :controls-position=\"element.options.controlsPosition\"\r\n            :style=\"{width: element.options.width}\"\r\n          ></el-input-number>\r\n        </template>\r\n\r\n        <template v-if=\"element.type == 'radio'\">\r\n          <el-radio-group v-model=\"element.options.defaultValue\"\r\n            :style=\"{width: element.options.width}\"\r\n            :disabled=\"element.options.disabled\"\r\n          >\r\n            <el-radio  \r\n              :style=\"{display: element.options.inline ? 'inline-block' : 'block'}\"\r\n              :label=\"item.value\" v-for=\"(item, index) in element.options.options\" :key=\"item.value + index\"\r\n              \r\n            >\r\n              {{element.options.showLabel ? item.label : item.value}}\r\n            </el-radio>\r\n          </el-radio-group>\r\n        </template>\r\n\r\n        <template v-if=\"element.type == 'checkbox'\">\r\n          <el-checkbox-group v-model=\"element.options.defaultValue\"\r\n            :style=\"{width: element.options.width}\"\r\n            :disabled=\"element.options.disabled\"\r\n          >\r\n            <el-checkbox\r\n              :style=\"{display: element.options.inline ? 'inline-block' : 'block'}\"\r\n              :label=\"item.value\" v-for=\"(item, index) in element.options.options\" :key=\"item.value + index\"\r\n            >\r\n              {{element.options.showLabel ? item.label : item.value}}\r\n            </el-checkbox>\r\n          </el-checkbox-group>\r\n        </template>\r\n\r\n        <template v-if=\"element.type == 'time'\">\r\n          <el-time-picker \r\n            v-model=\"element.options.defaultValue\"\r\n            :is-range=\"element.options.isRange\"\r\n            :placeholder=\"element.options.placeholder\"\r\n            :start-placeholder=\"element.options.startPlaceholder\"\r\n            :end-placeholder=\"element.options.endPlaceholder\"\r\n            :readonly=\"element.options.readonly\"\r\n            :disabled=\"element.options.disabled\"\r\n            :editable=\"element.options.editable\"\r\n            :clearable=\"element.options.clearable\"\r\n            :arrowControl=\"element.options.arrowControl\"\r\n            :style=\"{width: element.options.width}\"\r\n          >\r\n          </el-time-picker>\r\n        </template>\r\n\r\n        <template v-if=\"element.type == 'date'\">\r\n          <el-date-picker\r\n            v-model=\"element.options.defaultValue\"\r\n            :type=\"element.options.type\"\r\n            :is-range=\"element.options.isRange\"\r\n            :placeholder=\"element.options.placeholder\"\r\n            :start-placeholder=\"element.options.startPlaceholder\"\r\n            :end-placeholder=\"element.options.endPlaceholder\"\r\n            :readonly=\"element.options.readonly\"\r\n            :disabled=\"element.options.disabled\"\r\n            :editable=\"element.options.editable\"\r\n            :clearable=\"element.options.clearable\"\r\n            :style=\"{width: element.options.width}\"  \r\n          >\r\n          </el-date-picker>\r\n        </template>\r\n\r\n        <template v-if=\"element.type == 'rate'\">\r\n          <el-rate v-model=\"element.options.defaultValue\"\r\n            :max=\"element.options.max\"\r\n            :disabled=\"element.options.disabled\"\r\n            :allow-half=\"element.options.allowHalf\"\r\n          ></el-rate>\r\n        </template>\r\n\r\n        <template v-if=\"element.type == 'color'\">\r\n          <el-color-picker \r\n            v-model=\"element.options.defaultValue\"\r\n            :disabled=\"element.options.disabled\"\r\n            :show-alpha=\"element.options.showAlpha\"\r\n          ></el-color-picker>\r\n        </template>\r\n\r\n        <template v-if=\"element.type == 'select'\">\r\n          <el-select\r\n            v-model=\"element.options.defaultValue\"\r\n            :disabled=\"element.options.disabled\"\r\n            :multiple=\"element.options.multiple\"\r\n            :clearable=\"element.options.clearable\"\r\n            :placeholder=\"element.options.placeholder\"\r\n            :style=\"{width: element.options.width}\"\r\n          >\r\n            <el-option v-for=\"item in element.options.options\" :key=\"item.value\" :value=\"item.value\" :label=\"element.options.showLabel?item.label:item.value\"></el-option>\r\n          </el-select>\r\n        </template>\r\n\r\n        <template v-if=\"element.type=='switch'\">\r\n          <el-switch\r\n            v-model=\"element.options.defaultValue\"\r\n            :disabled=\"element.options.disabled\"\r\n          >\r\n          </el-switch>\r\n        </template>\r\n\r\n        <template v-if=\"element.type=='slider'\">\r\n          <el-slider \r\n            v-model=\"element.options.defaultValue\"\r\n            :min=\"element.options.min\"\r\n            :max=\"element.options.max\"\r\n            :disabled=\"element.options.disabled\"\r\n            :step=\"element.options.step\"\r\n            :show-input=\"element.options.showInput\"\r\n            :range=\"element.options.range\"\r\n            :style=\"{width: element.options.width}\"\r\n          ></el-slider>\r\n        </template>\r\n\r\n        <template v-if=\"element.type=='imgupload'\">\r\n          <fm-upload\r\n            v-model=\"element.options.defaultValue\"\r\n            :disabled=\"element.options.disabled\"\r\n            :style=\"{'width': element.options.width}\"\r\n            :width=\"element.options.size.width\"\r\n            :height=\"element.options.size.height\"\r\n            token=\"xxx\"\r\n            domain=\"xxx\"\r\n          >\r\n            \r\n          </fm-upload>\r\n        </template>\r\n\r\n        <template v-if=\"element.type == 'cascader'\">\r\n          <el-cascader\r\n            v-model=\"element.options.defaultValue\"\r\n            :disabled=\"element.options.disabled\"\r\n            :clearable=\"element.options.clearable\"\r\n            :placeholder=\"element.options.placeholder\"\r\n            :style=\"{width: element.options.width}\"\r\n            :options=\"element.options.remoteOptions\"\r\n          >\r\n\r\n          </el-cascader>\r\n        </template>\r\n\r\n        <template v-if=\"element.type == 'editor'\">\r\n          <vue-editor\r\n            v-model=\"element.options.defaultValue\"\r\n            :style=\"{width: element.options.width}\"\r\n          >\r\n          </vue-editor>\r\n        </template>\r\n\r\n        <template v-if=\"element.type=='blank'\">\r\n          <div style=\"height: 50px;color: #999;background: #eee;line-height:50px;text-align:center;\">{{$t('fm.components.fields.blank')}}</div>\r\n        </template>\r\n\r\n        <template v-if=\"element.type == 'text'\">\r\n          <span>{{element.options.defaultValue}}</span>\r\n        </template>\r\n\r\n        <div class=\"widget-view-action\" v-if=\"selectWidget.key == element.key\">\r\n          <i class=\"iconfont icon-icon_clone\" @click.stop=\"handleWidgetClone(index)\"></i>\r\n          <i class=\"iconfont icon-trash\" @click.stop=\"handleWidgetDelete(index)\"></i>\r\n        </div>\r\n\r\n        <div class=\"widget-view-drag\" v-if=\"selectWidget.key == element.key\">\r\n          <i class=\"iconfont icon-drag drag-widget\"></i>\r\n        </div>\r\n        \r\n    </el-form-item>\r\n</template>\r\n\r\n<script>\r\nimport FmUpload from './Upload'\r\nexport default {\r\n  props: ['element', 'select', 'index', 'data'],\r\n  components: {\r\n    FmUpload,\r\n  },\r\n  data () {\r\n    return {\r\n      selectWidget: this.select\r\n    }\r\n  },\r\n  mounted () {\r\n    \r\n  },\r\n  methods: {\r\n    handleSelectWidget (index) {\r\n      this.selectWidget = this.data.list[index]\r\n    },\r\n    handleWidgetDelete (index) {\r\n      if (this.data.list.length - 1 === index) {\r\n        if (index === 0) {\r\n          this.selectWidget = {}\r\n        } else {\r\n          this.selectWidget = this.data.list[index - 1]\r\n        }\r\n      } else {\r\n        this.selectWidget = this.data.list[index + 1]\r\n      }\r\n\r\n      this.$nextTick(() => {\r\n        this.data.list.splice(index, 1)\r\n      })\r\n    },\r\n    handleWidgetClone (index) {\r\n      const key = Date.parse(new Date().toString()) + '_' + Math.ceil(Math.random() * 99999)\r\n      let cloneData = {\r\n        ...this.data.list[index],\r\n        options: {\r\n          ...this.data.list[index].options,\r\n          remoteFunc: 'func_' + key\r\n        },\r\n        key,\r\n        model: this.data.list[index].type + '_' + key,\r\n        rules: this.data.list[index].rules || []\r\n      }\r\n\r\n      if (this.data.list[index].type === 'radio' || this.data.list[index].type === 'checkbox' || this.data.list[index].type === 'select') {\r\n\r\n        cloneData = {\r\n          ...cloneData,\r\n          options: {\r\n            ...cloneData.options,\r\n            options: cloneData.options.options.map(item => ({...item}))\r\n          }\r\n        }\r\n      }\r\n\r\n      this.data.list.splice(index, 0, cloneData)\r\n\r\n      this.$nextTick(() => {\r\n        this.selectWidget = this.data.list[index + 1]\r\n      })\r\n    },\r\n  },\r\n  watch: {\r\n    select (val) {\r\n      this.selectWidget = val\r\n    },\r\n    selectWidget: {\r\n      handler (val) {\r\n        this.$emit('update:select', val)\r\n      },\r\n      deep: true\r\n    }\r\n  }\r\n}\r\n</script>\r\n"]}]}