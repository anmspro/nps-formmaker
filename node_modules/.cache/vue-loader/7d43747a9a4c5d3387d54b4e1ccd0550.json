{"remainingRequest":"E:\\code\\vue-form-making\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\code\\vue-form-making\\src\\components\\GenerateForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\code\\vue-form-making\\src\\components\\GenerateForm.vue","mtime":1654599627840},{"path":"E:\\code\\vue-form-making\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1653903169935},{"path":"E:\\code\\vue-form-making\\node_modules\\babel-loader\\lib\\index.js","mtime":1653803163997},{"path":"E:\\code\\vue-form-making\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1653903169935},{"path":"E:\\code\\vue-form-making\\node_modules\\vue-loader\\lib\\index.js","mtime":1653903175370}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport GenetateFormItem from './GenerateFormItem'\r\nimport {loadJs} from '../util/index.js'\r\n\r\nexport default {\r\n  name: 'fm-generate-form',\r\n  components: {\r\n    GenetateFormItem\r\n  },\r\n  props: ['data', 'remote', 'value', 'insite'],\r\n  data () {\r\n    return {\r\n      models: {},\r\n      rules: {}\r\n    }\r\n  },\r\n  created () {\r\n    this.generateModle(this.data.list)\r\n  },\r\n  mounted () {\r\n  },\r\n  methods: {\r\n    generateModle (genList) {\r\n      for (let i = 0; i < genList.length; i++) {\r\n        if (genList[i].type === 'grid') {\r\n          genList[i].columns.forEach(item => {\r\n            this.generateModle(item.list)\r\n          })\r\n        } else {\r\n          if (this.value && Object.keys(this.value).indexOf(genList[i].model) >= 0) {\r\n            this.models[genList[i].model] = this.value[genList[i].model]\r\n          } else {\r\n            if (genList[i].type === 'blank') {\r\n              this.$set(this.models, genList[i].model, genList[i].options.defaultType === 'String' ? '' : (genList[i].options.defaultType === 'Object' ? {} : []))\r\n            } else {\r\n              // this.models[genList[i].model] = genList[i].options.answer\r\n              this.models[genList[i].model] = genList[i].options.defaultValue\r\n            }      \r\n          }\r\n          \r\n          if (this.rules[genList[i].model]) {\r\n            \r\n            this.rules[genList[i].model] = [...this.rules[genList[i].model], ...genList[i].rules.map(item => {\r\n              if (item.pattern) {\r\n                return {...item, pattern: new RegExp(item.pattern)}\r\n              } else {\r\n                return {...item}\r\n              }\r\n            })]\r\n          } else {\r\n            \r\n            this.rules[genList[i].model] = [...genList[i].rules.map(item => {\r\n              if (item.pattern) {\r\n                return {...item, pattern: new RegExp(item.pattern)}\r\n              } else {\r\n                return {...item}\r\n              }\r\n            })]\r\n          }      \r\n        }\r\n      }\r\n    },\r\n    getData () {\r\n      return new Promise((resolve, reject) => {\r\n        this.$refs.generateForm.validate(valid => {\r\n          if (valid) {\r\n            resolve(this.models)\r\n          } else {\r\n            reject(new Error(this.$t('fm.message.validError')).message)\r\n          }\r\n        })\r\n      })\r\n    },\r\n    reset () {\r\n      this.$refs.generateForm.resetFields()\r\n    },\r\n    onInputChange (value, field) {\r\n      this.$emit('on-change', field, value, this.models)\r\n    },\r\n    refresh () {\r\n      \r\n    }\r\n  },\r\n  watch: {\r\n    data: {\r\n      deep: true,\r\n      handler (val) {\r\n        this.generateModle(val.list)\r\n      }\r\n    },\r\n    value: {\r\n      deep: true,\r\n      handler (val) {\r\n        console.log(JSON.stringify(val))\r\n        this.models = {...this.models, ...val}\r\n      }\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["GenerateForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"GenerateForm.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div class=\"fm-style\">\r\n    <el-form ref=\"generateForm\" \r\n      label-suffix=\":\"\r\n      :size=\"data.config.size\"\r\n      :model=\"models\" :rules=\"rules\" :label-position=\"data.config.labelPosition\" :label-width=\"data.config.labelWidth + 'px'\">\r\n      <template v-for=\"item in data.list\">\r\n\r\n        <template v-if=\"item.type == 'grid'\">\r\n          <el-row\r\n            :key=\"item.key\"\r\n            type=\"flex\"\r\n            :gutter=\"item.options.gutter ? item.options.gutter : 0\"\r\n            :justify=\"item.options.justify\"\r\n            :align=\"item.options.align\"\r\n          >\r\n            <el-col v-for=\"(col, colIndex) in item.columns\" :key=\"colIndex\" :span=\"col.span\">\r\n              \r\n\r\n              <template v-for=\"citem in col.list\" >\r\n                <el-form-item v-if=\"citem.type=='blank'\" :label=\"citem.name\" :prop=\"citem.model\" :key=\"citem.key\">\r\n                  <slot :name=\"citem.model\" :model=\"models\"></slot>\r\n                </el-form-item>\r\n                <genetate-form-item v-else \r\n                  :key=\"citem.key\" \r\n                  :models.sync=\"models\" \r\n                  :remote=\"remote\" \r\n                  :rules=\"rules\" \r\n                  :widget=\"citem\"\r\n                  @input-change=\"onInputChange\">\r\n                </genetate-form-item>\r\n              </template>\r\n            </el-col>\r\n          </el-row>\r\n        </template>\r\n\r\n        <template v-else-if=\"item.type == 'blank'\">\r\n          <el-form-item :label=\"item.name\" :prop=\"item.model\" :key=\"item.key\">\r\n            <slot :name=\"item.model\" :model=\"models\"></slot>\r\n          </el-form-item>\r\n        </template>\r\n\r\n        <template v-else>\r\n          <genetate-form-item \r\n            :key=\"item.key\" \r\n            :models.sync=\"models\" \r\n            :rules=\"rules\" \r\n            :widget=\"item\" \r\n            @input-change=\"onInputChange\"\r\n            :remote=\"remote\">\r\n          </genetate-form-item>\r\n        </template>\r\n        \r\n      </template>\r\n    </el-form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport GenetateFormItem from './GenerateFormItem'\r\nimport {loadJs} from '../util/index.js'\r\n\r\nexport default {\r\n  name: 'fm-generate-form',\r\n  components: {\r\n    GenetateFormItem\r\n  },\r\n  props: ['data', 'remote', 'value', 'insite'],\r\n  data () {\r\n    return {\r\n      models: {},\r\n      rules: {}\r\n    }\r\n  },\r\n  created () {\r\n    this.generateModle(this.data.list)\r\n  },\r\n  mounted () {\r\n  },\r\n  methods: {\r\n    generateModle (genList) {\r\n      for (let i = 0; i < genList.length; i++) {\r\n        if (genList[i].type === 'grid') {\r\n          genList[i].columns.forEach(item => {\r\n            this.generateModle(item.list)\r\n          })\r\n        } else {\r\n          if (this.value && Object.keys(this.value).indexOf(genList[i].model) >= 0) {\r\n            this.models[genList[i].model] = this.value[genList[i].model]\r\n          } else {\r\n            if (genList[i].type === 'blank') {\r\n              this.$set(this.models, genList[i].model, genList[i].options.defaultType === 'String' ? '' : (genList[i].options.defaultType === 'Object' ? {} : []))\r\n            } else {\r\n              // this.models[genList[i].model] = genList[i].options.answer\r\n              this.models[genList[i].model] = genList[i].options.defaultValue\r\n            }      \r\n          }\r\n          \r\n          if (this.rules[genList[i].model]) {\r\n            \r\n            this.rules[genList[i].model] = [...this.rules[genList[i].model], ...genList[i].rules.map(item => {\r\n              if (item.pattern) {\r\n                return {...item, pattern: new RegExp(item.pattern)}\r\n              } else {\r\n                return {...item}\r\n              }\r\n            })]\r\n          } else {\r\n            \r\n            this.rules[genList[i].model] = [...genList[i].rules.map(item => {\r\n              if (item.pattern) {\r\n                return {...item, pattern: new RegExp(item.pattern)}\r\n              } else {\r\n                return {...item}\r\n              }\r\n            })]\r\n          }      \r\n        }\r\n      }\r\n    },\r\n    getData () {\r\n      return new Promise((resolve, reject) => {\r\n        this.$refs.generateForm.validate(valid => {\r\n          if (valid) {\r\n            resolve(this.models)\r\n          } else {\r\n            reject(new Error(this.$t('fm.message.validError')).message)\r\n          }\r\n        })\r\n      })\r\n    },\r\n    reset () {\r\n      this.$refs.generateForm.resetFields()\r\n    },\r\n    onInputChange (value, field) {\r\n      this.$emit('on-change', field, value, this.models)\r\n    },\r\n    refresh () {\r\n      \r\n    }\r\n  },\r\n  watch: {\r\n    data: {\r\n      deep: true,\r\n      handler (val) {\r\n        this.generateModle(val.list)\r\n      }\r\n    },\r\n    value: {\r\n      deep: true,\r\n      handler (val) {\r\n        console.log(JSON.stringify(val))\r\n        this.models = {...this.models, ...val}\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n// @import '../styles/cover.scss';\r\n</style>\r\n"]}]}