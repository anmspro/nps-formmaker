{"remainingRequest":"E:\\code\\vue-form-making\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\code\\vue-form-making\\src\\components\\GenerateFormItem.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\code\\vue-form-making\\src\\components\\GenerateFormItem.vue","mtime":1653889326448},{"path":"E:\\code\\vue-form-making\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1653903169935},{"path":"E:\\code\\vue-form-making\\node_modules\\babel-loader\\lib\\index.js","mtime":1653803163997},{"path":"E:\\code\\vue-form-making\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1653903169935},{"path":"E:\\code\\vue-form-making\\node_modules\\vue-loader\\lib\\index.js","mtime":1653903175370}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport FmUpload from './Upload'\r\n\r\nexport default {\r\n  props: ['widget', 'models', 'rules', 'remote'],\r\n  components: {\r\n    FmUpload\r\n  },\r\n  data () {\r\n    return {\r\n      dataModel: this.models[this.widget.model]\r\n    }\r\n  },\r\n  created () {\r\n    if (this.widget.options.remote && this.remote[this.widget.options.remoteFunc]) {\r\n      this.remote[this.widget.options.remoteFunc]((data) => {\r\n        this.widget.options.remoteOptions = data.map(item => {\r\n          return {\r\n            value: item[this.widget.options.props.value],\r\n            label: item[this.widget.options.props.label],\r\n            children: item[this.widget.options.props.children]\r\n          }\r\n        })\r\n      })\r\n    }\r\n\r\n    if (this.widget.type === 'imgupload' && this.widget.options.isQiniu) {\r\n      this.remote[this.widget.options.tokenFunc]((data) => {\r\n        this.widget.options.token = data\r\n      })\r\n    }\r\n  },\r\n  methods: {\r\n  },\r\n  watch: {\r\n    dataModel: {\r\n      deep: true,\r\n      handler (val) {\r\n        this.models[this.widget.model] = val\r\n        this.$emit('update:models', {\r\n          ...this.models,\r\n          [this.widget.model]: val\r\n        })\r\n        this.$emit('input-change', val, this.widget.model)\r\n      }\r\n    },\r\n    models: {\r\n      deep: true,\r\n      handler (val) {\r\n        this.dataModel = val[this.widget.model]\r\n      }\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["GenerateFormItem.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgNA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"GenerateFormItem.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <el-form-item :label=\"widget.name\" :prop=\"widget.model\">\r\n    <template v-if=\"widget.type == 'input'\" >\r\n      <el-input \r\n        v-if=\"widget.options.dataType == 'number' || widget.options.dataType == 'integer' || widget.options.dataType == 'float'\"\r\n        type=\"number\"\r\n        v-model.number=\"dataModel\"\r\n        :placeholder=\"widget.options.placeholder\"\r\n        :style=\"{width: widget.options.width}\"\r\n        :disabled=\"widget.options.disabled\"\r\n      ></el-input>\r\n      <el-input \r\n        v-else\r\n        :type=\"widget.options.dataType\"\r\n        v-model=\"dataModel\"\r\n        :disabled=\"widget.options.disabled\"\r\n        :placeholder=\"widget.options.placeholder\"\r\n        :style=\"{width: widget.options.width}\"\r\n      ></el-input>\r\n    </template>\r\n\r\n    <template v-if=\"widget.type == 'textarea'\">\r\n      <el-input type=\"textarea\" :rows=\"5\"\r\n        v-model=\"dataModel\"\r\n        :disabled=\"widget.options.disabled\"\r\n        :placeholder=\"widget.options.placeholder\"\r\n        :style=\"{width: widget.options.width}\"\r\n      ></el-input>\r\n    </template>\r\n\r\n    <template v-if=\"widget.type == 'number'\">\r\n      <el-input-number \r\n        v-model=\"dataModel\" \r\n        :style=\"{width: widget.options.width}\"\r\n        :step=\"widget.options.step\"\r\n        controls-position=\"right\"\r\n        :disabled=\"widget.options.disabled\"\r\n        :min=\"widget.options.min\"\r\n        :max=\"widget.options.max\"\r\n      ></el-input-number>\r\n    </template>\r\n\r\n    <template v-if=\"widget.type == 'radio'\">\r\n      <el-radio-group v-model=\"dataModel\"\r\n        :style=\"{width: widget.options.width}\"\r\n        :disabled=\"widget.options.disabled\"\r\n      >\r\n        <el-radio\r\n          :style=\"{display: widget.options.inline ? 'inline-block' : 'block'}\"\r\n          :label=\"item.value\" v-for=\"(item, index) in (widget.options.remote ? widget.options.remoteOptions : widget.options.options)\" :key=\"index\"\r\n        >\r\n          <template v-if=\"widget.options.remote\">{{item.label}}</template>\r\n          <template v-else>{{widget.options.showLabel ? item.label : item.value}}</template>\r\n        </el-radio>\r\n      </el-radio-group>\r\n    </template>\r\n\r\n    <template v-if=\"widget.type == 'checkbox'\">\r\n      <el-checkbox-group v-model=\"dataModel\"\r\n        :style=\"{width: widget.options.width}\"\r\n        :disabled=\"widget.options.disabled\"\r\n      >\r\n        <el-checkbox\r\n          \r\n          :style=\"{display: widget.options.inline ? 'inline-block' : 'block'}\"\r\n          :label=\"item.value\" v-for=\"(item, index) in (widget.options.remote ? widget.options.remoteOptions : widget.options.options)\" :key=\"index\"\r\n        >\r\n          <template v-if=\"widget.options.remote\">{{item.label}}</template>\r\n          <template v-else>{{widget.options.showLabel ? item.label : item.value}}</template>\r\n        </el-checkbox>\r\n      </el-checkbox-group>\r\n    </template>\r\n\r\n    <template v-if=\"widget.type == 'time'\">\r\n      <el-time-picker \r\n        v-model=\"dataModel\"\r\n        :is-range=\"widget.options.isRange\"\r\n        :placeholder=\"widget.options.placeholder\"\r\n        :start-placeholder=\"widget.options.startPlaceholder\"\r\n        :end-placeholder=\"widget.options.endPlaceholder\"\r\n        :readonly=\"widget.options.readonly\"\r\n        :disabled=\"widget.options.disabled\"\r\n        :editable=\"widget.options.editable\"\r\n        :clearable=\"widget.options.clearable\"\r\n        :arrowControl=\"widget.options.arrowControl\"\r\n        :value-format=\"widget.options.format\"\r\n        :style=\"{width: widget.options.width}\"\r\n      >\r\n      </el-time-picker>\r\n    </template>\r\n\r\n    <template v-if=\"widget.type=='date'\">\r\n      <el-date-picker\r\n        v-model=\"dataModel\"\r\n        :type=\"widget.options.type\"\r\n        :placeholder=\"widget.options.placeholder\"\r\n        :start-placeholder=\"widget.options.startPlaceholder\"\r\n        :end-placeholder=\"widget.options.endPlaceholder\"\r\n        :readonly=\"widget.options.readonly\"\r\n        :disabled=\"widget.options.disabled\"\r\n        :editable=\"widget.options.editable\"\r\n        :clearable=\"widget.options.clearable\"\r\n        :value-format=\"widget.options.timestamp ? 'timestamp' : widget.options.format\"\r\n        :format=\"widget.options.format\"\r\n        :style=\"{width: widget.options.width}\"\r\n      >\r\n      </el-date-picker>\r\n    </template>\r\n\r\n    <template v-if=\"widget.type =='rate'\">\r\n      <el-rate v-model=\"dataModel\"\r\n        :max=\"widget.options.max\"\r\n        :disabled=\"widget.options.disabled\"\r\n        :allow-half=\"widget.options.allowHalf\"\r\n      ></el-rate>\r\n    </template>\r\n\r\n    <template v-if=\"widget.type == 'color'\">\r\n      <el-color-picker \r\n        v-model=\"dataModel\"\r\n        :disabled=\"widget.options.disabled\"\r\n        :show-alpha=\"widget.options.showAlpha\"\r\n      ></el-color-picker>\r\n    </template>\r\n\r\n    <template v-if=\"widget.type == 'select'\">\r\n      <el-select\r\n        v-model=\"dataModel\"\r\n        :disabled=\"widget.options.disabled\"\r\n        :multiple=\"widget.options.multiple\"\r\n        :clearable=\"widget.options.clearable\"\r\n        :placeholder=\"widget.options.placeholder\"\r\n        :style=\"{width: widget.options.width}\"\r\n        :filterable=\"widget.options.filterable\"\r\n      >\r\n        <el-option v-for=\"item in (widget.options.remote ? widget.options.remoteOptions : widget.options.options)\" :key=\"item.value\" :value=\"item.value\" :label=\"widget.options.showLabel || widget.options.remote?item.label:item.value\"></el-option>\r\n      </el-select>\r\n    </template>\r\n\r\n    <template v-if=\"widget.type=='switch'\">\r\n      <el-switch\r\n        v-model=\"dataModel\"\r\n        :disabled=\"widget.options.disabled\"\r\n      >\r\n      </el-switch>\r\n    </template>\r\n\r\n    <template v-if=\"widget.type=='slider'\">\r\n      <el-slider \r\n        v-model=\"dataModel\"\r\n        :min=\"widget.options.min\"\r\n        :max=\"widget.options.max\"\r\n        :disabled=\"widget.options.disabled\"\r\n        :step=\"widget.options.step\"\r\n        :show-input=\"widget.options.showInput\"\r\n        :range=\"widget.options.range\"\r\n        :style=\"{width: widget.options.width}\"\r\n      ></el-slider>\r\n    </template>\r\n\r\n    <template v-if=\"widget.type=='imgupload'\">\r\n      <fm-upload\r\n        v-model=\"dataModel\"\r\n        :disabled=\"widget.options.disabled\"\r\n        :style=\"{'width': widget.options.width}\"\r\n        :width=\"widget.options.size.width\"\r\n        :height=\"widget.options.size.height\"\r\n        :token=\"widget.options.token\"\r\n        :domain=\"widget.options.domain\"\r\n        :multiple=\"widget.options.multiple\"\r\n        :length=\"widget.options.length\"\r\n        :is-qiniu=\"widget.options.isQiniu\"\r\n        :is-delete=\"widget.options.isDelete\"\r\n        :min=\"widget.options.min\"\r\n        :is-edit=\"widget.options.isEdit\"\r\n        :action=\"widget.options.action\"\r\n      >\r\n      </fm-upload>\r\n    </template>\r\n\r\n    <template v-if=\"widget.type == 'editor'\">\r\n      <vue-editor\r\n        v-model=\"dataModel\"\r\n        :style=\"{width: widget.options.width}\"\r\n      >\r\n      </vue-editor>\r\n    </template>\r\n\r\n    <template v-if=\"widget.type == 'cascader'\">\r\n      <el-cascader\r\n        v-model=\"dataModel\"\r\n        :disabled=\"widget.options.disabled\"\r\n        :clearable=\"widget.options.clearable\"\r\n        :placeholder=\"widget.options.placeholder\"\r\n        :style=\"{width: widget.options.width}\"\r\n        :options=\"widget.options.remoteOptions\"\r\n      >\r\n\r\n      </el-cascader>\r\n    </template>\r\n\r\n    <template v-if=\"widget.type == 'text'\">\r\n      <span>{{dataModel}}</span>\r\n    </template>\r\n  </el-form-item>\r\n</template>\r\n\r\n<script>\r\nimport FmUpload from './Upload'\r\n\r\nexport default {\r\n  props: ['widget', 'models', 'rules', 'remote'],\r\n  components: {\r\n    FmUpload\r\n  },\r\n  data () {\r\n    return {\r\n      dataModel: this.models[this.widget.model]\r\n    }\r\n  },\r\n  created () {\r\n    if (this.widget.options.remote && this.remote[this.widget.options.remoteFunc]) {\r\n      this.remote[this.widget.options.remoteFunc]((data) => {\r\n        this.widget.options.remoteOptions = data.map(item => {\r\n          return {\r\n            value: item[this.widget.options.props.value],\r\n            label: item[this.widget.options.props.label],\r\n            children: item[this.widget.options.props.children]\r\n          }\r\n        })\r\n      })\r\n    }\r\n\r\n    if (this.widget.type === 'imgupload' && this.widget.options.isQiniu) {\r\n      this.remote[this.widget.options.tokenFunc]((data) => {\r\n        this.widget.options.token = data\r\n      })\r\n    }\r\n  },\r\n  methods: {\r\n  },\r\n  watch: {\r\n    dataModel: {\r\n      deep: true,\r\n      handler (val) {\r\n        this.models[this.widget.model] = val\r\n        this.$emit('update:models', {\r\n          ...this.models,\r\n          [this.widget.model]: val\r\n        })\r\n        this.$emit('input-change', val, this.widget.model)\r\n      }\r\n    },\r\n    models: {\r\n      deep: true,\r\n      handler (val) {\r\n        this.dataModel = val[this.widget.model]\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n"]}]}