{"remainingRequest":"E:\\code\\vue js\\vue-form-making\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\code\\vue js\\vue-form-making\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\code\\vue js\\vue-form-making\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\code\\vue js\\vue-form-making\\src\\components\\WidgetFormItem.vue?vue&type=template&id=323a1d0b&","dependencies":[{"path":"E:\\code\\vue js\\vue-form-making\\src\\components\\WidgetFormItem.vue","mtime":1655185556463},{"path":"E:\\code\\vue js\\vue-form-making\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1653903169935},{"path":"E:\\code\\vue js\\vue-form-making\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1653903175370},{"path":"E:\\code\\vue js\\vue-form-making\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1653903169935},{"path":"E:\\code\\vue js\\vue-form-making\\node_modules\\vue-loader\\lib\\index.js","mtime":1653903175370}],"contextDependencies":[],"result":["var render = function () {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm.element && _vm.element.key\n    ? _c(\n        \"el-form-item\",\n        {\n          staticClass: \"widget-view \",\n          class: {\n            active: _vm.selectWidget.key == _vm.element.key,\n            is_req: _vm.element.options.required,\n          },\n          nativeOn: {\n            click: function ($event) {\n              $event.stopPropagation()\n              return _vm.handleSelectWidget(_vm.index)\n            },\n          },\n        },\n        [\n          _vm.element.type == \"input\"\n            ? [\n                _c(\"el-input\", {\n                  style: { width: _vm.element.options.width },\n                  attrs: {\n                    placeholder: _vm.element.options.placeholder,\n                    disabled: _vm.element.options.disabled,\n                  },\n                  model: {\n                    value: _vm.element.options.defaultValue,\n                    callback: function ($$v) {\n                      _vm.$set(_vm.element.options, \"defaultValue\", $$v)\n                    },\n                    expression: \"element.options.defaultValue\",\n                  },\n                }),\n              ]\n            : _vm._e(),\n          _vm.element.type == \"textarea\"\n            ? [\n                _c(\"el-input\", {\n                  style: { width: _vm.element.options.width },\n                  attrs: {\n                    type: \"textarea\",\n                    rows: 5,\n                    disabled: _vm.element.options.disabled,\n                    placeholder: _vm.element.options.placeholder,\n                  },\n                  model: {\n                    value: _vm.element.options.defaultValue,\n                    callback: function ($$v) {\n                      _vm.$set(_vm.element.options, \"defaultValue\", $$v)\n                    },\n                    expression: \"element.options.defaultValue\",\n                  },\n                }),\n              ]\n            : _vm._e(),\n          _vm.element.type == \"number\"\n            ? [\n                _c(\"el-input-number\", {\n                  style: { width: _vm.element.options.width },\n                  attrs: {\n                    disabled: _vm.element.options.disabled,\n                    \"controls-position\": _vm.element.options.controlsPosition,\n                  },\n                  model: {\n                    value: _vm.element.options.defaultValue,\n                    callback: function ($$v) {\n                      _vm.$set(_vm.element.options, \"defaultValue\", $$v)\n                    },\n                    expression: \"element.options.defaultValue\",\n                  },\n                }),\n              ]\n            : _vm._e(),\n          _vm.element.type == \"radio\"\n            ? [\n                _c(\n                  \"el-radio-group\",\n                  {\n                    style: { width: _vm.element.options.width },\n                    attrs: { disabled: _vm.element.options.disabled },\n                    model: {\n                      value: _vm.element.options.defaultValue,\n                      callback: function ($$v) {\n                        _vm.$set(_vm.element.options, \"defaultValue\", $$v)\n                      },\n                      expression: \"element.options.defaultValue\",\n                    },\n                  },\n                  _vm._l(_vm.element.options.options, function (item, index) {\n                    return _c(\n                      \"el-radio\",\n                      {\n                        key: item.value + index,\n                        style: {\n                          display: _vm.element.options.inline\n                            ? \"inline-block\"\n                            : \"block\",\n                        },\n                        attrs: { label: item.value },\n                      },\n                      [\n                        _vm._v(\n                          \"\\n            \" +\n                            _vm._s(\n                              _vm.element.options.showLabel\n                                ? item.label\n                                : item.value\n                            ) +\n                            \"\\n          \"\n                        ),\n                      ]\n                    )\n                  }),\n                  1\n                ),\n              ]\n            : _vm._e(),\n          _vm.element.type == \"nps\"\n            ? [\n                _c(\"p\", {\n                  domProps: {\n                    innerHTML: _vm._s(_vm.element.options.textValue),\n                  },\n                }),\n                _c(\"br\"),\n                _c(\"p\", {\n                  domProps: {\n                    innerHTML: _vm._s(_vm.element.options.descriptionValue),\n                  },\n                }),\n                _c(\"br\"),\n                _c(\n                  \"el-radio-group\",\n                  {\n                    style: { width: _vm.element.options.width },\n                    attrs: { disabled: _vm.element.options.disabled },\n                    model: {\n                      value: _vm.element.options.defaultValue,\n                      callback: function ($$v) {\n                        _vm.$set(_vm.element.options, \"defaultValue\", $$v)\n                      },\n                      expression: \"element.options.defaultValue\",\n                    },\n                  },\n                  _vm._l(_vm.element.options.options, function (item, index) {\n                    return _c(\n                      \"el-radio\",\n                      {\n                        key: item.value + index,\n                        style: {\n                          display: _vm.element.options.inline\n                            ? \"inline-block\"\n                            : \"block\",\n                        },\n                        attrs: { label: item.value },\n                      },\n                      [\n                        _vm._v(\n                          \"\\n            \" +\n                            _vm._s(\n                              _vm.element.options.showLabel\n                                ? item.label\n                                : item.value\n                            ) +\n                            \"\\n          \"\n                        ),\n                      ]\n                    )\n                  }),\n                  1\n                ),\n              ]\n            : _vm._e(),\n          _vm.element.type == \"mcqSingle\"\n            ? [\n                _c(\"p\", {\n                  domProps: {\n                    innerHTML: _vm._s(_vm.element.options.textValue),\n                  },\n                }),\n                _c(\"br\"),\n                _c(\n                  \"el-radio-group\",\n                  {\n                    style: { width: _vm.element.options.width },\n                    attrs: { disabled: _vm.element.options.disabled },\n                    model: {\n                      value: _vm.element.options.defaultValue,\n                      callback: function ($$v) {\n                        _vm.$set(_vm.element.options, \"defaultValue\", $$v)\n                      },\n                      expression: \"element.options.defaultValue\",\n                    },\n                  },\n                  _vm._l(_vm.element.options.options, function (item, index) {\n                    return _c(\n                      \"el-radio\",\n                      {\n                        key: item.value + index,\n                        style: {\n                          display: _vm.element.options.inline\n                            ? \"inline-block\"\n                            : \"block\",\n                        },\n                        attrs: { label: item.value },\n                      },\n                      [\n                        _vm._v(\n                          \"\\n            \" +\n                            _vm._s(\n                              _vm.element.options.showLabel\n                                ? item.label\n                                : item.value\n                            ) +\n                            \"\\n          \"\n                        ),\n                      ]\n                    )\n                  }),\n                  1\n                ),\n              ]\n            : _vm._e(),\n          _vm.element.type == \"rating\"\n            ? [\n                _c(\"p\", {\n                  domProps: {\n                    innerHTML: _vm._s(_vm.element.options.textValue),\n                  },\n                }),\n                _c(\"br\"),\n                _c(\"p\", {\n                  domProps: {\n                    innerHTML: _vm._s(_vm.element.options.descriptionValue),\n                  },\n                }),\n                _c(\"br\"),\n                _c(\"el-rate\", {\n                  attrs: {\n                    max: _vm.element.options.max,\n                    disabled: _vm.element.options.disabled,\n                    \"allow-half\": _vm.element.options.allowHalf,\n                  },\n                  model: {\n                    value: _vm.element.options.defaultValue,\n                    callback: function ($$v) {\n                      _vm.$set(_vm.element.options, \"defaultValue\", $$v)\n                    },\n                    expression: \"element.options.defaultValue\",\n                  },\n                }),\n              ]\n            : _vm._e(),\n          _vm.element.type == \"matrix\"\n            ? [\n                _c(\"p\", {\n                  domProps: {\n                    innerHTML: _vm._s(_vm.element.options.textValue),\n                  },\n                }),\n                _c(\"br\"),\n                _c(\"p\", {\n                  domProps: {\n                    innerHTML: _vm._s(_vm.element.options.descriptionValue),\n                  },\n                }),\n                _c(\"br\"),\n                _c(\"table\", [\n                  _c(\"tr\", [\n                    _c(\"td\"),\n                    _c(\"td\", [_vm._v(\"1st Column\")]),\n                    _c(\"td\", [_vm._v(\"2nd Column\")]),\n                  ]),\n                  _c(\"tr\", [\n                    _c(\"td\", [_vm._v(\"1st Row\")]),\n                    _c(\n                      \"td\",\n                      { attrs: { colspan: \"2\" } },\n                      [\n                        _c(\n                          \"el-radio-group\",\n                          {\n                            style: { width: _vm.element.options.width },\n                            attrs: { disabled: _vm.element.options.disabled },\n                            model: {\n                              value: _vm.element.options.defaultValue[0],\n                              callback: function ($$v) {\n                                _vm.$set(\n                                  _vm.element.options.defaultValue,\n                                  0,\n                                  $$v\n                                )\n                              },\n                              expression: \"element.options.defaultValue[0]\",\n                            },\n                          },\n                          _vm._l(\n                            _vm.element.options.options1,\n                            function (item, index) {\n                              return _c(\n                                \"el-radio\",\n                                {\n                                  key: item.value + index,\n                                  style: {\n                                    display: _vm.element.options.inline\n                                      ? \"inline-block\"\n                                      : \"block\",\n                                  },\n                                  attrs: { label: item.value },\n                                },\n                                [\n                                  _vm._v(\n                                    \"\\n                  \" +\n                                      _vm._s(\n                                        _vm.element.options.showLabel\n                                          ? item.label\n                                          : item.value\n                                      ) +\n                                      \"\\n                \"\n                                  ),\n                                ]\n                              )\n                            }\n                          ),\n                          1\n                        ),\n                      ],\n                      1\n                    ),\n                  ]),\n                  _c(\"tr\", [\n                    _c(\"td\", [_vm._v(\"2nd Row\")]),\n                    _c(\n                      \"td\",\n                      { attrs: { colspan: \"2\" } },\n                      [\n                        _c(\n                          \"el-radio-group\",\n                          {\n                            style: { width: _vm.element.options.width },\n                            attrs: { disabled: _vm.element.options.disabled },\n                            model: {\n                              value: _vm.element.options.defaultValue[1],\n                              callback: function ($$v) {\n                                _vm.$set(\n                                  _vm.element.options.defaultValue,\n                                  1,\n                                  $$v\n                                )\n                              },\n                              expression: \"element.options.defaultValue[1]\",\n                            },\n                          },\n                          _vm._l(\n                            _vm.element.options.options2,\n                            function (item, index) {\n                              return _c(\n                                \"el-radio\",\n                                {\n                                  key: item.value + index,\n                                  style: {\n                                    display: _vm.element.options.inline\n                                      ? \"inline-block\"\n                                      : \"block\",\n                                  },\n                                  attrs: { label: item.value },\n                                },\n                                [\n                                  _vm._v(\n                                    \"\\n                  \" +\n                                      _vm._s(\n                                        _vm.element.options.showLabel\n                                          ? item.label\n                                          : item.value\n                                      ) +\n                                      \"\\n                \"\n                                  ),\n                                ]\n                              )\n                            }\n                          ),\n                          1\n                        ),\n                      ],\n                      1\n                    ),\n                  ]),\n                ]),\n              ]\n            : _vm._e(),\n          _vm.element.type == \"matrixDynamic\"\n            ? [\n                _c(\"p\", {\n                  domProps: {\n                    innerHTML: _vm._s(_vm.element.options.textValue),\n                  },\n                }),\n                _c(\"br\"),\n                _c(\"p\", {\n                  domProps: {\n                    innerHTML: _vm._s(_vm.element.options.descriptionValue),\n                  },\n                }),\n                _c(\"br\"),\n                _c(\"table\", [\n                  _c(\"thead\", [\n                    _c(\n                      \"tr\",\n                      [\n                        _c(\"th\", { attrs: { scope: \"col\" } }),\n                        _vm._l(\n                          _vm.element.options.columnOptions,\n                          function (column) {\n                            return _c(\n                              \"th\",\n                              { key: column.value, attrs: { scope: \"col\" } },\n                              [\n                                _vm._v(\n                                  \"\\n              \" +\n                                    _vm._s(column.name) +\n                                    \"\\n              \"\n                                ),\n                              ]\n                            )\n                          }\n                        ),\n                      ],\n                      2\n                    ),\n                  ]),\n                  _c(\n                    \"tbody\",\n                    _vm._l(\n                      _vm.element.options.rowOptions,\n                      function (row, index) {\n                        return _c(\"tr\", { key: row.name }, [\n                          _c(\"th\", { attrs: { scope: \"row\" } }, [\n                            _c(\"div\", [\n                              _c(\"label\", [_vm._v(_vm._s(row.name))]),\n                            ]),\n                          ]),\n                          _c(\n                            \"td\",\n                            {\n                              attrs: {\n                                colspan:\n                                  _vm.element.options.columnOptions.length,\n                              },\n                            },\n                            [\n                              _c(\n                                \"el-radio-group\",\n                                {\n                                  style: { width: _vm.element.options.width },\n                                  attrs: {\n                                    disabled: _vm.element.options.disabled,\n                                  },\n                                  model: {\n                                    value:\n                                      _vm.element.options.defaultValue[index],\n                                    callback: function ($$v) {\n                                      _vm.$set(\n                                        _vm.element.options.defaultValue,\n                                        index,\n                                        $$v\n                                      )\n                                    },\n                                    expression:\n                                      \"element.options.defaultValue[index]\",\n                                  },\n                                },\n                                _vm._l(\n                                  _vm.element.options.columnOptions,\n                                  function (item, index) {\n                                    return _c(\n                                      \"el-radio\",\n                                      {\n                                        key: item.value + index,\n                                        style: {\n                                          display: _vm.element.options.inline\n                                            ? \"inline-block\"\n                                            : \"block\",\n                                        },\n                                        attrs: { label: item.value },\n                                      },\n                                      [\n                                        _vm._v(\n                                          \"\\n                      \" +\n                                            _vm._s(\n                                              _vm.element.options.showLabel\n                                                ? item.label\n                                                : item.value\n                                            ) +\n                                            \"\\n                    \"\n                                        ),\n                                      ]\n                                    )\n                                  }\n                                ),\n                                1\n                              ),\n                            ],\n                            1\n                          ),\n                        ])\n                      }\n                    ),\n                    0\n                  ),\n                ]),\n              ]\n            : _vm._e(),\n          _vm.element.type == \"mcqMultiple\"\n            ? [\n                _c(\"p\", {\n                  domProps: {\n                    innerHTML: _vm._s(_vm.element.options.textValue),\n                  },\n                }),\n                _c(\"br\"),\n                _c(\n                  \"el-checkbox-group\",\n                  {\n                    style: { width: _vm.element.options.width },\n                    attrs: { disabled: _vm.element.options.disabled },\n                    model: {\n                      value: _vm.element.options.defaultValue,\n                      callback: function ($$v) {\n                        _vm.$set(_vm.element.options, \"defaultValue\", $$v)\n                      },\n                      expression: \"element.options.defaultValue\",\n                    },\n                  },\n                  _vm._l(_vm.element.options.options, function (item, index) {\n                    return _c(\n                      \"el-checkbox\",\n                      {\n                        key: item.value + index,\n                        style: {\n                          display: _vm.element.options.inline\n                            ? \"inline-block\"\n                            : \"block\",\n                        },\n                        attrs: { label: item.value },\n                      },\n                      [\n                        _vm._v(\n                          \"\\n            \" +\n                            _vm._s(\n                              _vm.element.options.showLabel\n                                ? item.label\n                                : item.value\n                            ) +\n                            \"\\n          \"\n                        ),\n                      ]\n                    )\n                  }),\n                  1\n                ),\n              ]\n            : _vm._e(),\n          _vm.element.type == \"yesno\"\n            ? [\n                _c(\"p\", {\n                  domProps: {\n                    innerHTML: _vm._s(_vm.element.options.textValue),\n                  },\n                }),\n                _c(\"br\"),\n                _c(\n                  \"el-radio-group\",\n                  {\n                    style: { width: _vm.element.options.width },\n                    attrs: { disabled: _vm.element.options.disabled },\n                    model: {\n                      value: _vm.element.options.defaultValue,\n                      callback: function ($$v) {\n                        _vm.$set(_vm.element.options, \"defaultValue\", $$v)\n                      },\n                      expression: \"element.options.defaultValue\",\n                    },\n                  },\n                  _vm._l(_vm.element.options.options, function (item, index) {\n                    return _c(\n                      \"el-radio\",\n                      {\n                        key: item.value + index,\n                        style: {\n                          display: _vm.element.options.inline\n                            ? \"inline-block\"\n                            : \"block\",\n                        },\n                        attrs: { label: item.value },\n                      },\n                      [\n                        _vm._v(\n                          \"\\n            \" +\n                            _vm._s(\n                              _vm.element.options.showLabel\n                                ? item.label\n                                : item.value\n                            ) +\n                            \"\\n          \"\n                        ),\n                      ]\n                    )\n                  }),\n                  1\n                ),\n              ]\n            : _vm._e(),\n          _vm.element.type == \"openEnded\"\n            ? [\n                _c(\"p\", {\n                  domProps: {\n                    innerHTML: _vm._s(_vm.element.options.textValue),\n                  },\n                }),\n                _c(\"br\"),\n                _c(\"el-input\", {\n                  style: { width: _vm.element.options.width },\n                  attrs: {\n                    type: \"textarea\",\n                    rows: 2,\n                    disabled: _vm.element.options.disabled,\n                    placeholder: _vm.element.options.placeholder,\n                  },\n                  model: {\n                    value: _vm.element.options.defaultValue,\n                    callback: function ($$v) {\n                      _vm.$set(_vm.element.options, \"defaultValue\", $$v)\n                    },\n                    expression: \"element.options.defaultValue\",\n                  },\n                }),\n              ]\n            : _vm._e(),\n          _vm.element.type == \"checkbox\"\n            ? [\n                _c(\n                  \"el-checkbox-group\",\n                  {\n                    style: { width: _vm.element.options.width },\n                    attrs: { disabled: _vm.element.options.disabled },\n                    model: {\n                      value: _vm.element.options.defaultValue,\n                      callback: function ($$v) {\n                        _vm.$set(_vm.element.options, \"defaultValue\", $$v)\n                      },\n                      expression: \"element.options.defaultValue\",\n                    },\n                  },\n                  _vm._l(_vm.element.options.options, function (item, index) {\n                    return _c(\n                      \"el-checkbox\",\n                      {\n                        key: item.value + index,\n                        style: {\n                          display: _vm.element.options.inline\n                            ? \"inline-block\"\n                            : \"block\",\n                        },\n                        attrs: { label: item.value },\n                      },\n                      [\n                        _vm._v(\n                          \"\\n            \" +\n                            _vm._s(\n                              _vm.element.options.showLabel\n                                ? item.label\n                                : item.value\n                            ) +\n                            \"\\n          \"\n                        ),\n                      ]\n                    )\n                  }),\n                  1\n                ),\n              ]\n            : _vm._e(),\n          _vm.element.type == \"time\"\n            ? [\n                _c(\"el-time-picker\", {\n                  style: { width: _vm.element.options.width },\n                  attrs: {\n                    \"is-range\": _vm.element.options.isRange,\n                    placeholder: _vm.element.options.placeholder,\n                    \"start-placeholder\": _vm.element.options.startPlaceholder,\n                    \"end-placeholder\": _vm.element.options.endPlaceholder,\n                    readonly: _vm.element.options.readonly,\n                    disabled: _vm.element.options.disabled,\n                    editable: _vm.element.options.editable,\n                    clearable: _vm.element.options.clearable,\n                    arrowControl: _vm.element.options.arrowControl,\n                  },\n                  model: {\n                    value: _vm.element.options.defaultValue,\n                    callback: function ($$v) {\n                      _vm.$set(_vm.element.options, \"defaultValue\", $$v)\n                    },\n                    expression: \"element.options.defaultValue\",\n                  },\n                }),\n              ]\n            : _vm._e(),\n          _vm.element.type == \"date\"\n            ? [\n                _c(\"el-date-picker\", {\n                  style: { width: _vm.element.options.width },\n                  attrs: {\n                    type: _vm.element.options.type,\n                    \"is-range\": _vm.element.options.isRange,\n                    placeholder: _vm.element.options.placeholder,\n                    \"start-placeholder\": _vm.element.options.startPlaceholder,\n                    \"end-placeholder\": _vm.element.options.endPlaceholder,\n                    readonly: _vm.element.options.readonly,\n                    disabled: _vm.element.options.disabled,\n                    editable: _vm.element.options.editable,\n                    clearable: _vm.element.options.clearable,\n                  },\n                  model: {\n                    value: _vm.element.options.defaultValue,\n                    callback: function ($$v) {\n                      _vm.$set(_vm.element.options, \"defaultValue\", $$v)\n                    },\n                    expression: \"element.options.defaultValue\",\n                  },\n                }),\n              ]\n            : _vm._e(),\n          _vm.element.type == \"rate\"\n            ? [\n                _c(\"el-rate\", {\n                  attrs: {\n                    max: _vm.element.options.max,\n                    disabled: _vm.element.options.disabled,\n                    \"allow-half\": _vm.element.options.allowHalf,\n                  },\n                  model: {\n                    value: _vm.element.options.defaultValue,\n                    callback: function ($$v) {\n                      _vm.$set(_vm.element.options, \"defaultValue\", $$v)\n                    },\n                    expression: \"element.options.defaultValue\",\n                  },\n                }),\n              ]\n            : _vm._e(),\n          _vm.element.type == \"color\"\n            ? [\n                _c(\"el-color-picker\", {\n                  attrs: {\n                    disabled: _vm.element.options.disabled,\n                    \"show-alpha\": _vm.element.options.showAlpha,\n                  },\n                  model: {\n                    value: _vm.element.options.defaultValue,\n                    callback: function ($$v) {\n                      _vm.$set(_vm.element.options, \"defaultValue\", $$v)\n                    },\n                    expression: \"element.options.defaultValue\",\n                  },\n                }),\n              ]\n            : _vm._e(),\n          _vm.element.type == \"select\"\n            ? [\n                _c(\n                  \"el-select\",\n                  {\n                    style: { width: _vm.element.options.width },\n                    attrs: {\n                      disabled: _vm.element.options.disabled,\n                      multiple: _vm.element.options.multiple,\n                      clearable: _vm.element.options.clearable,\n                      placeholder: _vm.element.options.placeholder,\n                    },\n                    model: {\n                      value: _vm.element.options.defaultValue,\n                      callback: function ($$v) {\n                        _vm.$set(_vm.element.options, \"defaultValue\", $$v)\n                      },\n                      expression: \"element.options.defaultValue\",\n                    },\n                  },\n                  _vm._l(_vm.element.options.options, function (item) {\n                    return _c(\"el-option\", {\n                      key: item.value,\n                      attrs: {\n                        value: item.value,\n                        label: _vm.element.options.showLabel\n                          ? item.label\n                          : item.value,\n                      },\n                    })\n                  }),\n                  1\n                ),\n              ]\n            : _vm._e(),\n          _vm.element.type == \"switch\"\n            ? [\n                _c(\"el-switch\", {\n                  attrs: { disabled: _vm.element.options.disabled },\n                  model: {\n                    value: _vm.element.options.defaultValue,\n                    callback: function ($$v) {\n                      _vm.$set(_vm.element.options, \"defaultValue\", $$v)\n                    },\n                    expression: \"element.options.defaultValue\",\n                  },\n                }),\n              ]\n            : _vm._e(),\n          _vm.element.type == \"slider\"\n            ? [\n                _c(\"p\", {\n                  domProps: {\n                    innerHTML: _vm._s(_vm.element.options.textValue),\n                  },\n                }),\n                _c(\"br\"),\n                _c(\"el-slider\", {\n                  style: { width: _vm.element.options.width },\n                  attrs: {\n                    min: _vm.element.options.min,\n                    max: _vm.element.options.max,\n                    disabled: _vm.element.options.disabled,\n                    step: _vm.element.options.step,\n                    \"show-input\": _vm.element.options.showInput,\n                    range: _vm.element.options.range,\n                  },\n                  model: {\n                    value: _vm.element.options.defaultValue,\n                    callback: function ($$v) {\n                      _vm.$set(_vm.element.options, \"defaultValue\", $$v)\n                    },\n                    expression: \"element.options.defaultValue\",\n                  },\n                }),\n              ]\n            : _vm._e(),\n          _vm.element.type == \"imgupload\"\n            ? [\n                _c(\"fm-upload\", {\n                  style: { width: _vm.element.options.width },\n                  attrs: {\n                    disabled: _vm.element.options.disabled,\n                    width: _vm.element.options.size.width,\n                    height: _vm.element.options.size.height,\n                    token: \"xxx\",\n                    domain: \"xxx\",\n                  },\n                  model: {\n                    value: _vm.element.options.defaultValue,\n                    callback: function ($$v) {\n                      _vm.$set(_vm.element.options, \"defaultValue\", $$v)\n                    },\n                    expression: \"element.options.defaultValue\",\n                  },\n                }),\n              ]\n            : _vm._e(),\n          _vm.element.type == \"cascader\"\n            ? [\n                _c(\"el-cascader\", {\n                  style: { width: _vm.element.options.width },\n                  attrs: {\n                    disabled: _vm.element.options.disabled,\n                    clearable: _vm.element.options.clearable,\n                    placeholder: _vm.element.options.placeholder,\n                    options: _vm.element.options.remoteOptions,\n                  },\n                  model: {\n                    value: _vm.element.options.defaultValue,\n                    callback: function ($$v) {\n                      _vm.$set(_vm.element.options, \"defaultValue\", $$v)\n                    },\n                    expression: \"element.options.defaultValue\",\n                  },\n                }),\n              ]\n            : _vm._e(),\n          _vm.element.type == \"editor\"\n            ? [\n                _c(\"vue-editor\", {\n                  style: { width: _vm.element.options.width },\n                  model: {\n                    value: _vm.element.options.defaultValue,\n                    callback: function ($$v) {\n                      _vm.$set(_vm.element.options, \"defaultValue\", $$v)\n                    },\n                    expression: \"element.options.defaultValue\",\n                  },\n                }),\n              ]\n            : _vm._e(),\n          _vm.element.type == \"blank\"\n            ? [\n                _c(\n                  \"div\",\n                  {\n                    staticStyle: {\n                      height: \"50px\",\n                      color: \"#999\",\n                      background: \"#eee\",\n                      \"line-height\": \"50px\",\n                      \"text-align\": \"center\",\n                    },\n                  },\n                  [_vm._v(_vm._s(_vm.$t(\"fm.components.fields.blank\")))]\n                ),\n              ]\n            : _vm._e(),\n          _vm.element.type == \"text\"\n            ? [_c(\"span\", [_vm._v(_vm._s(_vm.element.options.defaultValue))])]\n            : _vm._e(),\n          _vm.selectWidget.key == _vm.element.key\n            ? _c(\"div\", { staticClass: \"widget-view-action\" }, [\n                _c(\"i\", {\n                  staticClass: \"iconfont icon-icon_clone\",\n                  on: {\n                    click: function ($event) {\n                      $event.stopPropagation()\n                      return _vm.handleWidgetClone(_vm.index)\n                    },\n                  },\n                }),\n                _c(\"i\", {\n                  staticClass: \"iconfont icon-trash\",\n                  on: {\n                    click: function ($event) {\n                      $event.stopPropagation()\n                      return _vm.handleWidgetDelete(_vm.index)\n                    },\n                  },\n                }),\n              ])\n            : _vm._e(),\n          _vm.selectWidget.key == _vm.element.key\n            ? _c(\"div\", { staticClass: \"widget-view-drag\" }, [\n                _c(\"i\", { staticClass: \"iconfont icon-drag drag-widget\" }),\n              ])\n            : _vm._e(),\n        ],\n        2\n      )\n    : _vm._e()\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}